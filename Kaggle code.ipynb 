{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "147aa9a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import folium\n",
    "import seaborn as sns\n",
    "from astral.sun import sun\n",
    "from astral import LocationInfo\n",
    "import pytz\n",
    "import holidays\n",
    "\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\n",
    "import category_encoders as ce\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "import catboost as cb\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c41bea56",
   "metadata": {},
   "source": [
    "# Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "65dfa4c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_parquet('train.parquet')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "898841dd",
   "metadata": {},
   "source": [
    "There are no duplicates and no NaNs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ffa01f0",
   "metadata": {},
   "source": [
    "## Converting to_datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bce80092",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Extracting Year, Month, Day of Month, Weekday, and Hour into separate columns\n",
    "df['Year'] = df['date'].dt.year\n",
    "df['Month'] = df['date'].dt.month\n",
    "df['Day'] = df['date'].dt.day\n",
    "df['Weekday'] = df['date'].dt.weekday  # Monday=0, Sunday=6\n",
    "df['Is_weekend'] = df['date'].dt.weekday // 5  # 1 if weekend, 0 if weekday\n",
    "df['Hour'] = df['date'].dt.hour"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "4a5c1caf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "48321    100007049-102007049\n",
       "48324    100007049-102007049\n",
       "48327    100007049-102007049\n",
       "48330    100007049-102007049\n",
       "48333    100007049-102007049\n",
       "Name: counter_id, dtype: category\n",
       "Categories (56, object): ['100007049-101007049', '100007049-102007049', '100036718-103036718', '100036718-104036718', ..., '100063175-353277233', '100063175-353277235', '300014702-353245971', '300014702-353245972']"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['counter_id'].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ea1132a",
   "metadata": {},
   "source": [
    "## Adding a 'sunlight' column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "10d93283",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Define the location (Paris, for example)\n",
    "city = LocationInfo(\"Paris\", \"France\", \"Europe/Paris\")\n",
    "tz = pytz.timezone(city.timezone)\n",
    "\n",
    "# Function to determine sunlight based on sunrise and sunset times\n",
    "def is_daytime(date):\n",
    "    date = date.replace(tzinfo=tz)  # Make the date timezone-aware\n",
    "    s = sun(city.observer, date=date)\n",
    "    sunrise = s['sunrise'].astimezone(tz)\n",
    "    sunset = s['sunset'].astimezone(tz)\n",
    "    return sunrise < date < sunset\n",
    "\n",
    "# Apply the function to create a 'sunlight' column\n",
    "df['sunlight'] = df['date'].apply(is_daytime).astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "663cdc35",
   "metadata": {},
   "source": [
    "## Adding 'season' and 'is_holiday'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b1a35c7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Function to determine the season based on month\n",
    "def get_season(month):\n",
    "    if month in range(3, 6):  # Spring: March - May\n",
    "        return 'Spring'\n",
    "    elif month in range(6, 9):  # Summer: June - August\n",
    "        return 'Summer'\n",
    "    elif month in range(9, 12):  # Autumn: September - November\n",
    "        return 'Autumn'\n",
    "    else:  # Winter: December - February\n",
    "        return 'Winter'\n",
    "\n",
    "# Define holidays for a specific country (France in this example)\n",
    "fr_holidays = holidays.France()\n",
    "\n",
    "# Function to check if a date is a holiday\n",
    "def is_holiday(date):\n",
    "    return date in fr_holidays\n",
    "\n",
    "# Apply the functions to create 'season' and 'is_holiday' columns\n",
    "df['season'] = df['date'].dt.month.apply(get_season)\n",
    "df['is_holiday'] = df['date'].apply(is_holiday).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7071c491",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Get the first and last date in the DataFrame\n",
    "first_date = df['date'].min()\n",
    "last_date = df['date'].max()\n",
    "\n",
    "print(f\"The data spans from {first_date} to {last_date}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b789556e",
   "metadata": {},
   "source": [
    "## Adding lockdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dc492d54",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Define the periods of curfew and lockdown\n",
    "curfew_periods = [\n",
    "    ('2020-10-17', '2020-10-29', '21:00', '06:00'),\n",
    "    ('2020-10-30', '2020-12-15', '00:00', '23:59'),\n",
    "    ('2020-12-15', '2021-05-19', '18:00', '06:00'),\n",
    "    ('2021-05-19', '2021-06-20', '21:00', '06:00')\n",
    "]\n",
    "\n",
    "# Create a function to check if a date is within a curfew period\n",
    "def is_within_curfew(date):\n",
    "    for start, end, start_time, end_time in curfew_periods:\n",
    "        start = pd.to_datetime(start)\n",
    "        end = pd.to_datetime(end)\n",
    "        start_time = pd.to_datetime(start_time).time()\n",
    "        end_time = pd.to_datetime(end_time).time()\n",
    "\n",
    "        if start <= date <= end:\n",
    "            if start.time() == end.time():\n",
    "                return date.time() >= start_time or date.time() <= end_time\n",
    "            else:\n",
    "                return start_time <= date.time() <= end_time\n",
    "    return False\n",
    "\n",
    "# Apply the function to create 'is_lockdown' column\n",
    "#df['is_lockdown'] = df['date'].apply(is_within_curfew).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0f30aff5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def encode(df, col, max_val):\n",
    "    \n",
    "    df[col + '_sin'] = np.sin(2 * np.pi * df[col]/max_val)\n",
    "    df[col + '_cos'] = np.cos (2 * np.pi * df[col]/max_val)\n",
    "    return df\n",
    "                                                                                          \n",
    "df = encode(df, 'Hour', 23)\n",
    "# df = encode(df, 'Month', 12)\n",
    "# df = encode(df, 'Day', 31)\n",
    "#df = encode(df, 'Weekday', 6)\n",
    "# df = encode(df, 'Is_weekend', 1)\n",
    "# df = encode(df, 'sunlight', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "625d06e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "bike_count_lockdown = df[(df['sunlight'] == 1) & (df['is_lockdown'] == 1)]['bike_count']\n",
    "bike_count_no_lockdown = df[(df['sunlight'] == 1) & (df['is_lockdown'] == 0)]['bike_count']\n",
    "\n",
    "# Create box plots for bike count during sunlight with and without lockdown\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.boxplot(y=bike_count_lockdown)\n",
    "plt.title('Bike Count During Sunlight (Lockdown)')\n",
    "plt.ylabel('Bike Count')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.boxplot(y=bike_count_no_lockdown)\n",
    "plt.title('Bike Count During Sunlight (No Lockdown)')\n",
    "plt.ylabel('Bike Count')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d156dbc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "bike_count_sunlight = df[df['sunlight'] == 1]\n",
    "\n",
    "# Calculate total bike count for each month during sunlight\n",
    "monthly_counts = bike_count_sunlight.groupby('Month')['bike_count'].sum()\n",
    "\n",
    "# Create a bar plot for total bike count per month during sunlight\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(monthly_counts.index, monthly_counts.values)\n",
    "plt.xlabel('Month')\n",
    "plt.ylabel('Total Bike Count')\n",
    "plt.title('Total Bike Count for Each Month During Sunlight')\n",
    "plt.xticks(range(1, 13))  # Setting x-ticks to correspond to months\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4603c046",
   "metadata": {},
   "outputs": [],
   "source": [
    "lockdown_sunlight = df[(df['sunlight'] == 1) & (df['is_lockdown'] == 1)].count()['bike_count']\n",
    "no_lockdown_sunlight = df[(df['sunlight'] == 1) & (df['is_lockdown'] == 0)].count()['bike_count']\n",
    "lockdown_allday = df[df['is_lockdown'] == 1].count()['bike_count']\n",
    "no_lockdown_allday = df[df['is_lockdown'] == 0].count()['bike_count']\n",
    "\n",
    "# Creating lists for categories and their corresponding counts\n",
    "categories = ['Lockdown/Sunlight', 'No Lockdown/Sunlight', 'Lockdown/All Day', 'No Lockdown/All Day']\n",
    "counts = [lockdown_sunlight, no_lockdown_sunlight, lockdown_allday, no_lockdown_allday]\n",
    "\n",
    "# Creating a bar plot\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(categories, counts, color=['blue', 'green', 'orange', 'red'])\n",
    "plt.xlabel('Categories')\n",
    "plt.ylabel('Bar Count')\n",
    "plt.title('Bar Count for Different Categories')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9c0895cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "sunlight_weekend = df[(df['sunlight'] == 1) & (df['Is_weekend'] == 1)]\n",
    "sunlight_weekday = df[(df['sunlight'] == 1) & (df['Is_weekend'] == 0)]\n",
    "\n",
    "# Create separate box plots for bike count during sunlight on weekends and weekdays\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "sns.boxplot(x=sunlight_weekend['bike_count'])\n",
    "plt.title('Bike Count During Sunlight (Weekends)')\n",
    "plt.xlabel('Bike Count')\n",
    "\n",
    "plt.subplot(1, 2, 2)\n",
    "sns.boxplot(x=sunlight_weekday['bike_count'])\n",
    "plt.title('Bike Count During Sunlight (Weekdays)')\n",
    "plt.xlabel('Bike Count')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "03244f68",
   "metadata": {},
   "source": [
    "There is one counter (counter_id = 300014702-353245972) that was installed after the beginning of the dataset (counter_installation_date = '2020-11-29 00:00:00'). We can see in the below plot there were thus bike counts before that date). I think we should remove all the entries for this date before it started.\n",
    "\n",
    "**Actually, there are no entries before the date, so we're good**."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5fcc1872",
   "metadata": {},
   "source": [
    "## Creating 'date2' to merge with weather_conditions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e3cec1e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['date'] = pd.to_datetime(df['date'])\n",
    "\n",
    "# Create 'date2' column with the desired format 'YYYY-MM-DD'\n",
    "df['date2'] = df['date'].dt.strftime('%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "116834d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_conditions = pd.read_csv('weather_data_paris_daily.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8a66e695",
   "metadata": {},
   "outputs": [],
   "source": [
    "weather_conditions.drop(axis=1, columns=['name', 'tempmax', 'tempmin', 'temp', 'dew',\n",
    "                                        'feelslikemax', 'feelslikemax', 'precipprob',\n",
    "                                        'precipcover', 'snowdepth', 'windgust', 'winddir', 'sealevelpressure',\n",
    "                                        'solarradiation', 'solarenergy', 'severerisk', 'moonphase',\n",
    "                                        'conditions', 'stations', 'description','sunrise','sunset',\n",
    "                                         'snow'], inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1458cae",
   "metadata": {},
   "source": [
    "## remove: cloudcover, precip, visibility, is_lockdown_encoded, windspeed, uvindex, Weekday_sin, Weekday_cos, sunlight_encoded, Year, is_holiday_encoded. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5ef7d071",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = pd.merge(df, weather_conditions, left_on='date2', right_on='datetime', how='left')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5590da5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df = merged_df.drop(axis=1, columns=['counter_id', 'counter_name', 'site_name', 'site_id', 'bike_count', 'date',\n",
    "                                            'counter_installation_date', 'counter_technical_id', 'icon',\n",
    "                                            'date2', 'datetime', 'feelslikemin', 'Hour', 'Weekday', 'coordinates',\n",
    "                                            'season', 'preciptype', 'cloudcover', 'precip', 'visibility'\n",
    "                                            , 'windspeed', 'uvindex', 'Weekday', 'sunlight', 'Year',\n",
    "                                           'is_holiday'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b49fdc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "merged_df.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "dc5406d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "numerical_features = ['feelslike', 'humidity','Hour_sin', 'Hour_cos', 'latitude', 'longitude']\n",
    "\n",
    "categorical_features = ['Year', 'Month', 'Day']\n",
    "\n",
    "categorical_features_label = ['Is_weekend']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ec80081",
   "metadata": {},
   "source": [
    "## StandardScaler() for numerical values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b0695fe6",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit and transform the selected columns\n",
    "scaled_columns = scaler.fit_transform(merged_df[numerical_features])\n",
    "\n",
    "# Create a DataFrame with the scaled data\n",
    "scaled_df = pd.DataFrame(scaled_columns, columns=numerical_features)\n",
    "\n",
    "# Replace the original columns with the scaled values in the original DataFrame\n",
    "merged_df[numerical_features] = scaled_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "53a6b3a5",
   "metadata": {},
   "source": [
    "## One hot encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "447d9519",
   "metadata": {},
   "outputs": [],
   "source": [
    "#columns_to_encode = merged_df[categorical_features_one_hot]\n",
    "\n",
    "#ohe = OneHotEncoder(handle_unknown='ignore')\n",
    "\n",
    "# Fit and transform the selected columns\n",
    "#one_hot_encoded = ohe.fit_transform(columns_to_encode)\n",
    "\n",
    "#one_hot_df = pd.DataFrame(one_hot_encoded.toarray(), columns=ohe.get_feature_names_out(categorical_features_one_hot))\n",
    "\n",
    "# Concatenate the one-hot encoded columns with the original DataFrame\n",
    "#merged_df = pd.concat([merged_df, one_hot_df], axis=1)\n",
    "\n",
    "# Drop the original categorical columns as they are now one-hot encoded\n",
    "#merged_df.drop(categorical_features_one_hot, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2076a6aa",
   "metadata": {},
   "source": [
    "## Label encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "e885f91f",
   "metadata": {},
   "outputs": [],
   "source": [
    "label_encoder = LabelEncoder()\n",
    "\n",
    "# Apply LabelEncoder to the selected columns\n",
    "for feature in categorical_features_label:\n",
    "    merged_df[feature + '_encoded'] = label_encoder.fit_transform(merged_df[feature])\n",
    "\n",
    "# Drop the original categorical columns as they are now label encoded\n",
    "merged_df.drop(categorical_features_label, axis=1, inplace=True)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d411df15",
   "metadata": {},
   "source": [
    "## Applying exact same preprocessing to X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "c6253d7a",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test = pd.read_parquet('final_test.parquet')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "1cb48209",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test['date'] = pd.to_datetime(X_test['date'])\n",
    "\n",
    "# Extracting Year, Month, Day of Month, Weekday, and Hour into separate columns\n",
    "X_test['Year'] = X_test['date'].dt.year\n",
    "X_test['Month'] = X_test['date'].dt.month\n",
    "X_test['Day'] = X_test['date'].dt.day\n",
    "X_test['Weekday'] = X_test['date'].dt.weekday  # Monday=0, Sunday=6\n",
    "X_test['Is_weekend'] = X_test['date'].dt.weekday // 5  # 1 if weekend, 0 if weekday\n",
    "X_test['Hour'] = X_test['date'].dt.hour\n",
    "\n",
    "# Define the location (Paris, for example)\n",
    "city = LocationInfo(\"Paris\", \"France\", \"Europe/Paris\")\n",
    "tz = pytz.timezone(city.timezone)\n",
    "\n",
    "# Function to determine sunlight based on sunrise and sunset times\n",
    "def is_daytime(date):\n",
    "    date = date.replace(tzinfo=tz)  # Make the date timezone-aware\n",
    "    s = sun(city.observer, date=date)\n",
    "    sunrise = s['sunrise'].astimezone(tz)\n",
    "    sunset = s['sunset'].astimezone(tz)\n",
    "    return sunrise < date < sunset\n",
    "\n",
    "# Apply the function to create a 'sunlight' column\n",
    "X_test['sunlight'] = X_test['date'].apply(is_daytime).astype(int)\n",
    "\n",
    "\n",
    "# Function to determine the season based on month\n",
    "def get_season(month):\n",
    "    if month in range(3, 6):  # Spring: March - May\n",
    "        return 'Spring'\n",
    "    elif month in range(6, 9):  # Summer: June - August\n",
    "        return 'Summer'\n",
    "    elif month in range(9, 12):  # Autumn: September - November\n",
    "        return 'Autumn'\n",
    "    else:  # Winter: December - February\n",
    "        return 'Winter'\n",
    "\n",
    "# Define holidays for a specific country (France in this example)\n",
    "fr_holidays = holidays.France()\n",
    "\n",
    "# Function to check if a date is a holiday\n",
    "def is_holiday(date):\n",
    "    return date in fr_holidays\n",
    "\n",
    "# Apply the functions to create 'season' and 'is_holiday' columns\n",
    "X_test['season'] = X_test['date'].dt.month.apply(get_season)\n",
    "X_test['is_holiday'] = X_test['date'].apply(is_holiday).astype(int)\n",
    "\n",
    "\n",
    "# Define the periods of curfew and lockdown\n",
    "curfew_periods = [\n",
    "    ('2020-10-17', '2020-10-29', '21:00', '06:00'),\n",
    "    ('2020-10-30', '2020-12-15', '00:00', '23:59'),\n",
    "    ('2020-12-15', '2021-05-19', '18:00', '06:00'),\n",
    "    ('2021-05-19', '2021-06-20', '21:00', '06:00')\n",
    "]\n",
    "\n",
    "# Create a function to check if a date is within a curfew period\n",
    "def is_within_curfew(date):\n",
    "    for start, end, start_time, end_time in curfew_periods:\n",
    "        start = pd.to_datetime(start)\n",
    "        end = pd.to_datetime(end)\n",
    "        start_time = pd.to_datetime(start_time).time()\n",
    "        end_time = pd.to_datetime(end_time).time()\n",
    "\n",
    "        if start <= date <= end:\n",
    "            if start.time() == end.time():\n",
    "                return date.time() >= start_time or date.time() <= end_time\n",
    "            else:\n",
    "                return start_time <= date.time() <= end_time\n",
    "    return False\n",
    "\n",
    "# Apply the function to create 'is_lockdown' column\n",
    "#X_test['is_lockdown'] = X_test['date'].apply(is_within_curfew).astype(int)\n",
    "\n",
    "X_test = encode(X_test, 'Hour', 23)\n",
    "# X_test = encode(X_test, 'Month', 12)\n",
    "# X_test = encode(X_test, 'Day', 31)\n",
    "# X_test = encode(X_test, 'Weekday', 6)\n",
    "# X_test = encode(X_test, 'Is_weekend', 1)\n",
    "# X_test = encode(X_test, 'sunlight', 1)\n",
    "\n",
    "\n",
    "# Create 'date2' column with the desired format 'YYYY-MM-DD'\n",
    "X_test['date2'] = X_test['date'].dt.strftime('%Y-%m-%d')\n",
    "\n",
    "merged_X_test = pd.merge(X_test, weather_conditions, left_on='date2', right_on='datetime', how='left')\n",
    "\n",
    "merged_X_test = merged_X_test.drop(axis=1, columns=['counter_id', 'counter_name', 'site_name', 'site_id', 'date',\n",
    "                                            'counter_installation_date', 'counter_technical_id',\n",
    "                                            'date2', 'datetime', 'feelslikemin', 'cloudcover', 'precip', 'visibility',\n",
    "                                            'Hour', 'Weekday', 'coordinates', 'icon', 'season', 'preciptype',\n",
    "                                              'windspeed', 'uvindex', 'Weekday', 'sunlight', 'Year',\n",
    "                                                   'is_holiday'])\n",
    "\n",
    "\n",
    "#Scaling\n",
    "\n",
    "# Fit and transform the selected columns\n",
    "scaled_columns = scaler.fit_transform(merged_X_test[numerical_features])\n",
    "\n",
    "# Create a DataFrame with the scaled data\n",
    "scaled_X_test = pd.DataFrame(scaled_columns, columns=numerical_features)\n",
    "\n",
    "# Replace the original columns with the scaled values in the original DataFrame\n",
    "merged_X_test[numerical_features] = scaled_X_test\n",
    "\n",
    "#Encoding One Hot \n",
    "\n",
    "#columns_to_encode = merged_X_test[categorical_features_one_hot]\n",
    "\n",
    "#ohe = OneHotEncoder(handle_unknown='ignore')\n",
    "\n",
    "# Fit and transform the selected columns\n",
    "#one_hot_encoded = ohe.fit_transform(columns_to_encode)\n",
    "\n",
    "#one_hot_X_test = pd.DataFrame(one_hot_encoded.toarray(), columns=ohe.get_feature_names_out(categorical_features_one_hot))\n",
    "\n",
    "# Concatenate the one-hot encoded columns with the original DataFrame\n",
    "#merged_X_test = pd.concat([merged_X_test, one_hot_X_test], axis=1)\n",
    "\n",
    "# Drop the original categorical columns as they are now one-hot encoded\n",
    "#merged_X_test.drop(categorical_features_one_hot, axis=1, inplace=True)\n",
    "\n",
    "#Encoding Label\n",
    "\n",
    "# Apply LabelEncoder to the selected columns\n",
    "for feature in categorical_features_label:\n",
    "    merged_X_test[feature + '_encoded'] = label_encoder.fit_transform(merged_X_test[feature])\n",
    "\n",
    "# Drop the original categorical columns as they are now label encoded\n",
    "merged_X_test.drop(categorical_features_label, axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "74dd9575",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE: 0.5476869178206567\n"
     ]
    }
   ],
   "source": [
    "# Assuming 'X_train' is your training set and 'y_train' is the corresponding target\n",
    "X_train = merged_df.drop('log_bike_count', axis=1)  # Features\n",
    "y_train = merged_df['log_bike_count']  # Target\n",
    "\n",
    "# Assuming 'X_test' is your test set\n",
    "X_test = merged_X_test  # Features\n",
    "\n",
    "# Initialize XGBoost model\n",
    "model = XGBRegressor()\n",
    "\n",
    "# Fit the model on the training data\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the training set\n",
    "y_pred_train = model.predict(X_train)\n",
    "\n",
    "y_pred_test = model.predict(X_test)\n",
    "\n",
    "pred_df = pd.DataFrame({'Id': X_test.index, 'log_bike_count': y_pred_test})\n",
    "\n",
    "pred_df.to_csv('submission.csv', index=False)\n",
    "\n",
    "# Calculate RMSE on the training set\n",
    "train_rmse = np.sqrt(mean_squared_error(y_train, y_pred_train))\n",
    "print(f\"Train RMSE: {train_rmse}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9cda85dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from xgboost import plot_importance\n",
    "plot_importance(model)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ae8eb2d3",
   "metadata": {},
   "source": [
    "remove: cloudcover, precip, visibility, is_lockdown_encoded, windspeed, uvindex, Weekday_sin, Weekday_cos, sunlight_encoded, Year, is_holiday_encoded. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76443dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.fit(X_train, y_train)\n",
    "pred = model.predict(X_test)\n",
    "\n",
    "pred_df = pd.DataFrame({'Id': X_test.index,\n",
    "                        'log_bike_count': pred})\n",
    "\n",
    "pred_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d055b0a3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Learning rate set to 0.109189\n",
      "0:\tlearn: 1.5504326\ttotal: 20.6ms\tremaining: 20.6s\n",
      "1:\tlearn: 1.4577924\ttotal: 34.4ms\tremaining: 17.2s\n",
      "2:\tlearn: 1.3783195\ttotal: 48.8ms\tremaining: 16.2s\n",
      "3:\tlearn: 1.3075400\ttotal: 62.9ms\tremaining: 15.7s\n",
      "4:\tlearn: 1.2508010\ttotal: 75.7ms\tremaining: 15.1s\n",
      "5:\tlearn: 1.1994726\ttotal: 88.9ms\tremaining: 14.7s\n",
      "6:\tlearn: 1.1559213\ttotal: 103ms\tremaining: 14.7s\n",
      "7:\tlearn: 1.1197604\ttotal: 117ms\tremaining: 14.5s\n",
      "8:\tlearn: 1.0889806\ttotal: 130ms\tremaining: 14.3s\n",
      "9:\tlearn: 1.0578380\ttotal: 144ms\tremaining: 14.2s\n",
      "10:\tlearn: 1.0354121\ttotal: 156ms\tremaining: 14.1s\n",
      "11:\tlearn: 1.0117972\ttotal: 170ms\tremaining: 14s\n",
      "12:\tlearn: 0.9942220\ttotal: 189ms\tremaining: 14.4s\n",
      "13:\tlearn: 0.9788846\ttotal: 212ms\tremaining: 14.9s\n",
      "14:\tlearn: 0.9662747\ttotal: 226ms\tremaining: 14.8s\n",
      "15:\tlearn: 0.9485459\ttotal: 239ms\tremaining: 14.7s\n",
      "16:\tlearn: 0.9389216\ttotal: 253ms\tremaining: 14.6s\n",
      "17:\tlearn: 0.9256274\ttotal: 265ms\tremaining: 14.5s\n",
      "18:\tlearn: 0.9152455\ttotal: 278ms\tremaining: 14.3s\n",
      "19:\tlearn: 0.9044089\ttotal: 292ms\tremaining: 14.3s\n",
      "20:\tlearn: 0.8980922\ttotal: 306ms\tremaining: 14.2s\n",
      "21:\tlearn: 0.8883400\ttotal: 319ms\tremaining: 14.2s\n",
      "22:\tlearn: 0.8835036\ttotal: 335ms\tremaining: 14.2s\n",
      "23:\tlearn: 0.8742667\ttotal: 354ms\tremaining: 14.4s\n",
      "24:\tlearn: 0.8691230\ttotal: 390ms\tremaining: 15.2s\n",
      "25:\tlearn: 0.8614387\ttotal: 406ms\tremaining: 15.2s\n",
      "26:\tlearn: 0.8580174\ttotal: 423ms\tremaining: 15.2s\n",
      "27:\tlearn: 0.8523066\ttotal: 437ms\tremaining: 15.2s\n",
      "28:\tlearn: 0.8463231\ttotal: 451ms\tremaining: 15.1s\n",
      "29:\tlearn: 0.8400411\ttotal: 465ms\tremaining: 15s\n",
      "30:\tlearn: 0.8322561\ttotal: 484ms\tremaining: 15.1s\n",
      "31:\tlearn: 0.8280228\ttotal: 502ms\tremaining: 15.2s\n",
      "32:\tlearn: 0.8215647\ttotal: 519ms\tremaining: 15.2s\n",
      "33:\tlearn: 0.8173726\ttotal: 536ms\tremaining: 15.2s\n",
      "34:\tlearn: 0.8130893\ttotal: 551ms\tremaining: 15.2s\n",
      "35:\tlearn: 0.8089046\ttotal: 565ms\tremaining: 15.1s\n",
      "36:\tlearn: 0.7973331\ttotal: 578ms\tremaining: 15.1s\n",
      "37:\tlearn: 0.7947286\ttotal: 595ms\tremaining: 15.1s\n",
      "38:\tlearn: 0.7912787\ttotal: 617ms\tremaining: 15.2s\n",
      "39:\tlearn: 0.7853350\ttotal: 635ms\tremaining: 15.2s\n",
      "40:\tlearn: 0.7826469\ttotal: 649ms\tremaining: 15.2s\n",
      "41:\tlearn: 0.7797812\ttotal: 663ms\tremaining: 15.1s\n",
      "42:\tlearn: 0.7776460\ttotal: 677ms\tremaining: 15.1s\n",
      "43:\tlearn: 0.7739782\ttotal: 693ms\tremaining: 15.1s\n",
      "44:\tlearn: 0.7719681\ttotal: 711ms\tremaining: 15.1s\n",
      "45:\tlearn: 0.7637066\ttotal: 728ms\tremaining: 15.1s\n",
      "46:\tlearn: 0.7567894\ttotal: 744ms\tremaining: 15.1s\n",
      "47:\tlearn: 0.7543010\ttotal: 758ms\tremaining: 15s\n",
      "48:\tlearn: 0.7510374\ttotal: 777ms\tremaining: 15.1s\n",
      "49:\tlearn: 0.7480638\ttotal: 793ms\tremaining: 15.1s\n",
      "50:\tlearn: 0.7442624\ttotal: 817ms\tremaining: 15.2s\n",
      "51:\tlearn: 0.7407020\ttotal: 838ms\tremaining: 15.3s\n",
      "52:\tlearn: 0.7387500\ttotal: 854ms\tremaining: 15.3s\n",
      "53:\tlearn: 0.7366873\ttotal: 867ms\tremaining: 15.2s\n",
      "54:\tlearn: 0.7350117\ttotal: 880ms\tremaining: 15.1s\n",
      "55:\tlearn: 0.7335301\ttotal: 894ms\tremaining: 15.1s\n",
      "56:\tlearn: 0.7315870\ttotal: 907ms\tremaining: 15s\n",
      "57:\tlearn: 0.7304503\ttotal: 919ms\tremaining: 14.9s\n",
      "58:\tlearn: 0.7290529\ttotal: 932ms\tremaining: 14.9s\n",
      "59:\tlearn: 0.7278016\ttotal: 943ms\tremaining: 14.8s\n",
      "60:\tlearn: 0.7256019\ttotal: 956ms\tremaining: 14.7s\n",
      "61:\tlearn: 0.7240106\ttotal: 970ms\tremaining: 14.7s\n",
      "62:\tlearn: 0.7196014\ttotal: 982ms\tremaining: 14.6s\n",
      "63:\tlearn: 0.7182524\ttotal: 995ms\tremaining: 14.5s\n",
      "64:\tlearn: 0.7166992\ttotal: 1.01s\tremaining: 14.5s\n",
      "65:\tlearn: 0.7147729\ttotal: 1.02s\tremaining: 14.4s\n",
      "66:\tlearn: 0.7138169\ttotal: 1.03s\tremaining: 14.4s\n",
      "67:\tlearn: 0.7120248\ttotal: 1.05s\tremaining: 14.4s\n",
      "68:\tlearn: 0.7109596\ttotal: 1.06s\tremaining: 14.4s\n",
      "69:\tlearn: 0.7094863\ttotal: 1.08s\tremaining: 14.4s\n",
      "70:\tlearn: 0.7085165\ttotal: 1.1s\tremaining: 14.4s\n",
      "71:\tlearn: 0.7075955\ttotal: 1.11s\tremaining: 14.3s\n",
      "72:\tlearn: 0.7065941\ttotal: 1.13s\tremaining: 14.3s\n",
      "73:\tlearn: 0.7044573\ttotal: 1.14s\tremaining: 14.3s\n",
      "74:\tlearn: 0.7029215\ttotal: 1.16s\tremaining: 14.3s\n",
      "75:\tlearn: 0.7017871\ttotal: 1.17s\tremaining: 14.2s\n",
      "76:\tlearn: 0.7007399\ttotal: 1.18s\tremaining: 14.2s\n",
      "77:\tlearn: 0.6970064\ttotal: 1.2s\tremaining: 14.2s\n",
      "78:\tlearn: 0.6955859\ttotal: 1.21s\tremaining: 14.2s\n",
      "79:\tlearn: 0.6946305\ttotal: 1.23s\tremaining: 14.1s\n",
      "80:\tlearn: 0.6939049\ttotal: 1.25s\tremaining: 14.1s\n",
      "81:\tlearn: 0.6931754\ttotal: 1.26s\tremaining: 14.1s\n",
      "82:\tlearn: 0.6897646\ttotal: 1.27s\tremaining: 14.1s\n",
      "83:\tlearn: 0.6890161\ttotal: 1.29s\tremaining: 14s\n",
      "84:\tlearn: 0.6875520\ttotal: 1.3s\tremaining: 14s\n",
      "85:\tlearn: 0.6869371\ttotal: 1.31s\tremaining: 14s\n",
      "86:\tlearn: 0.6858032\ttotal: 1.33s\tremaining: 13.9s\n",
      "87:\tlearn: 0.6847125\ttotal: 1.34s\tremaining: 13.9s\n",
      "88:\tlearn: 0.6839579\ttotal: 1.35s\tremaining: 13.9s\n",
      "89:\tlearn: 0.6830433\ttotal: 1.37s\tremaining: 13.8s\n",
      "90:\tlearn: 0.6821223\ttotal: 1.38s\tremaining: 13.8s\n",
      "91:\tlearn: 0.6809695\ttotal: 1.4s\tremaining: 13.8s\n",
      "92:\tlearn: 0.6800600\ttotal: 1.41s\tremaining: 13.8s\n",
      "93:\tlearn: 0.6795415\ttotal: 1.43s\tremaining: 13.7s\n",
      "94:\tlearn: 0.6788269\ttotal: 1.44s\tremaining: 13.7s\n",
      "95:\tlearn: 0.6775643\ttotal: 1.46s\tremaining: 13.7s\n",
      "96:\tlearn: 0.6767047\ttotal: 1.48s\tremaining: 13.7s\n",
      "97:\tlearn: 0.6751921\ttotal: 1.49s\tremaining: 13.7s\n",
      "98:\tlearn: 0.6724904\ttotal: 1.51s\tremaining: 13.7s\n",
      "99:\tlearn: 0.6717803\ttotal: 1.52s\tremaining: 13.7s\n",
      "100:\tlearn: 0.6710194\ttotal: 1.54s\tremaining: 13.8s\n",
      "101:\tlearn: 0.6702225\ttotal: 1.56s\tremaining: 13.8s\n",
      "102:\tlearn: 0.6680747\ttotal: 1.58s\tremaining: 13.8s\n",
      "103:\tlearn: 0.6677581\ttotal: 1.59s\tremaining: 13.7s\n",
      "104:\tlearn: 0.6671108\ttotal: 1.61s\tremaining: 13.8s\n",
      "105:\tlearn: 0.6664153\ttotal: 1.63s\tremaining: 13.8s\n",
      "106:\tlearn: 0.6657302\ttotal: 1.65s\tremaining: 13.8s\n",
      "107:\tlearn: 0.6650858\ttotal: 1.67s\tremaining: 13.8s\n",
      "108:\tlearn: 0.6644862\ttotal: 1.69s\tremaining: 13.8s\n",
      "109:\tlearn: 0.6640192\ttotal: 1.71s\tremaining: 13.8s\n",
      "110:\tlearn: 0.6634449\ttotal: 1.72s\tremaining: 13.8s\n",
      "111:\tlearn: 0.6630178\ttotal: 1.74s\tremaining: 13.8s\n",
      "112:\tlearn: 0.6625809\ttotal: 1.75s\tremaining: 13.7s\n",
      "113:\tlearn: 0.6620865\ttotal: 1.76s\tremaining: 13.7s\n",
      "114:\tlearn: 0.6613494\ttotal: 1.77s\tremaining: 13.7s\n",
      "115:\tlearn: 0.6603051\ttotal: 1.79s\tremaining: 13.6s\n",
      "116:\tlearn: 0.6597657\ttotal: 1.8s\tremaining: 13.6s\n",
      "117:\tlearn: 0.6588109\ttotal: 1.82s\tremaining: 13.6s\n",
      "118:\tlearn: 0.6582684\ttotal: 1.83s\tremaining: 13.5s\n",
      "119:\tlearn: 0.6563373\ttotal: 1.84s\tremaining: 13.5s\n",
      "120:\tlearn: 0.6557529\ttotal: 1.86s\tremaining: 13.5s\n",
      "121:\tlearn: 0.6543340\ttotal: 1.87s\tremaining: 13.5s\n",
      "122:\tlearn: 0.6535794\ttotal: 1.89s\tremaining: 13.5s\n",
      "123:\tlearn: 0.6528429\ttotal: 1.91s\tremaining: 13.5s\n",
      "124:\tlearn: 0.6513852\ttotal: 1.93s\tremaining: 13.5s\n",
      "125:\tlearn: 0.6508001\ttotal: 1.94s\tremaining: 13.5s\n",
      "126:\tlearn: 0.6501602\ttotal: 1.96s\tremaining: 13.4s\n",
      "127:\tlearn: 0.6492379\ttotal: 1.97s\tremaining: 13.4s\n",
      "128:\tlearn: 0.6488318\ttotal: 1.98s\tremaining: 13.4s\n",
      "129:\tlearn: 0.6485776\ttotal: 2s\tremaining: 13.4s\n",
      "130:\tlearn: 0.6481482\ttotal: 2.01s\tremaining: 13.3s\n",
      "131:\tlearn: 0.6476394\ttotal: 2.03s\tremaining: 13.4s\n",
      "132:\tlearn: 0.6472833\ttotal: 2.04s\tremaining: 13.3s\n",
      "133:\tlearn: 0.6468259\ttotal: 2.06s\tremaining: 13.3s\n",
      "134:\tlearn: 0.6463080\ttotal: 2.08s\tremaining: 13.3s\n",
      "135:\tlearn: 0.6459431\ttotal: 2.09s\tremaining: 13.3s\n",
      "136:\tlearn: 0.6455824\ttotal: 2.11s\tremaining: 13.3s\n",
      "137:\tlearn: 0.6451706\ttotal: 2.12s\tremaining: 13.3s\n",
      "138:\tlearn: 0.6444939\ttotal: 2.14s\tremaining: 13.2s\n",
      "139:\tlearn: 0.6439034\ttotal: 2.15s\tremaining: 13.2s\n",
      "140:\tlearn: 0.6434127\ttotal: 2.16s\tremaining: 13.2s\n",
      "141:\tlearn: 0.6428554\ttotal: 2.17s\tremaining: 13.1s\n",
      "142:\tlearn: 0.6423992\ttotal: 2.19s\tremaining: 13.1s\n",
      "143:\tlearn: 0.6416790\ttotal: 2.2s\tremaining: 13.1s\n",
      "144:\tlearn: 0.6406161\ttotal: 2.22s\tremaining: 13.1s\n",
      "145:\tlearn: 0.6402979\ttotal: 2.23s\tremaining: 13s\n",
      "146:\tlearn: 0.6398278\ttotal: 2.25s\tremaining: 13s\n",
      "147:\tlearn: 0.6394577\ttotal: 2.26s\tremaining: 13s\n",
      "148:\tlearn: 0.6391832\ttotal: 2.27s\tremaining: 13s\n",
      "149:\tlearn: 0.6388327\ttotal: 2.29s\tremaining: 13s\n",
      "150:\tlearn: 0.6383534\ttotal: 2.3s\tremaining: 12.9s\n",
      "151:\tlearn: 0.6381176\ttotal: 2.31s\tremaining: 12.9s\n",
      "152:\tlearn: 0.6377056\ttotal: 2.33s\tremaining: 12.9s\n",
      "153:\tlearn: 0.6373327\ttotal: 2.34s\tremaining: 12.9s\n",
      "154:\tlearn: 0.6367857\ttotal: 2.35s\tremaining: 12.8s\n",
      "155:\tlearn: 0.6362445\ttotal: 2.37s\tremaining: 12.8s\n",
      "156:\tlearn: 0.6359353\ttotal: 2.38s\tremaining: 12.8s\n",
      "157:\tlearn: 0.6356227\ttotal: 2.39s\tremaining: 12.8s\n",
      "158:\tlearn: 0.6352879\ttotal: 2.41s\tremaining: 12.7s\n",
      "159:\tlearn: 0.6349837\ttotal: 2.42s\tremaining: 12.7s\n",
      "160:\tlearn: 0.6346699\ttotal: 2.43s\tremaining: 12.7s\n",
      "161:\tlearn: 0.6341814\ttotal: 2.45s\tremaining: 12.7s\n",
      "162:\tlearn: 0.6338464\ttotal: 2.46s\tremaining: 12.6s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "163:\tlearn: 0.6334613\ttotal: 2.47s\tremaining: 12.6s\n",
      "164:\tlearn: 0.6332327\ttotal: 2.49s\tremaining: 12.6s\n",
      "165:\tlearn: 0.6329391\ttotal: 2.5s\tremaining: 12.6s\n",
      "166:\tlearn: 0.6325410\ttotal: 2.52s\tremaining: 12.6s\n",
      "167:\tlearn: 0.6321118\ttotal: 2.53s\tremaining: 12.5s\n",
      "168:\tlearn: 0.6317890\ttotal: 2.54s\tremaining: 12.5s\n",
      "169:\tlearn: 0.6315008\ttotal: 2.56s\tremaining: 12.5s\n",
      "170:\tlearn: 0.6308330\ttotal: 2.57s\tremaining: 12.5s\n",
      "171:\tlearn: 0.6297403\ttotal: 2.59s\tremaining: 12.5s\n",
      "172:\tlearn: 0.6294767\ttotal: 2.6s\tremaining: 12.4s\n",
      "173:\tlearn: 0.6290957\ttotal: 2.61s\tremaining: 12.4s\n",
      "174:\tlearn: 0.6287241\ttotal: 2.63s\tremaining: 12.4s\n",
      "175:\tlearn: 0.6283543\ttotal: 2.64s\tremaining: 12.4s\n",
      "176:\tlearn: 0.6282278\ttotal: 2.65s\tremaining: 12.3s\n",
      "177:\tlearn: 0.6280168\ttotal: 2.67s\tremaining: 12.3s\n",
      "178:\tlearn: 0.6276878\ttotal: 2.68s\tremaining: 12.3s\n",
      "179:\tlearn: 0.6255264\ttotal: 2.7s\tremaining: 12.3s\n",
      "180:\tlearn: 0.6252513\ttotal: 2.71s\tremaining: 12.3s\n",
      "181:\tlearn: 0.6250161\ttotal: 2.72s\tremaining: 12.2s\n",
      "182:\tlearn: 0.6246492\ttotal: 2.74s\tremaining: 12.2s\n",
      "183:\tlearn: 0.6242193\ttotal: 2.75s\tremaining: 12.2s\n",
      "184:\tlearn: 0.6239273\ttotal: 2.77s\tremaining: 12.2s\n",
      "185:\tlearn: 0.6235197\ttotal: 2.78s\tremaining: 12.2s\n",
      "186:\tlearn: 0.6232952\ttotal: 2.79s\tremaining: 12.1s\n",
      "187:\tlearn: 0.6230916\ttotal: 2.8s\tremaining: 12.1s\n",
      "188:\tlearn: 0.6228559\ttotal: 2.82s\tremaining: 12.1s\n",
      "189:\tlearn: 0.6225413\ttotal: 2.83s\tremaining: 12.1s\n",
      "190:\tlearn: 0.6217425\ttotal: 2.84s\tremaining: 12.1s\n",
      "191:\tlearn: 0.6214843\ttotal: 2.86s\tremaining: 12s\n",
      "192:\tlearn: 0.6210254\ttotal: 2.87s\tremaining: 12s\n",
      "193:\tlearn: 0.6206912\ttotal: 2.89s\tremaining: 12s\n",
      "194:\tlearn: 0.6203931\ttotal: 2.9s\tremaining: 12s\n",
      "195:\tlearn: 0.6202091\ttotal: 2.92s\tremaining: 12s\n",
      "196:\tlearn: 0.6195417\ttotal: 2.93s\tremaining: 11.9s\n",
      "197:\tlearn: 0.6193090\ttotal: 2.94s\tremaining: 11.9s\n",
      "198:\tlearn: 0.6191572\ttotal: 2.95s\tremaining: 11.9s\n",
      "199:\tlearn: 0.6186231\ttotal: 2.97s\tremaining: 11.9s\n",
      "200:\tlearn: 0.6177309\ttotal: 2.98s\tremaining: 11.9s\n",
      "201:\tlearn: 0.6171041\ttotal: 3s\tremaining: 11.8s\n",
      "202:\tlearn: 0.6164604\ttotal: 3.01s\tremaining: 11.8s\n",
      "203:\tlearn: 0.6159561\ttotal: 3.02s\tremaining: 11.8s\n",
      "204:\tlearn: 0.6158038\ttotal: 3.04s\tremaining: 11.8s\n",
      "205:\tlearn: 0.6155736\ttotal: 3.05s\tremaining: 11.8s\n",
      "206:\tlearn: 0.6152319\ttotal: 3.07s\tremaining: 11.8s\n",
      "207:\tlearn: 0.6148494\ttotal: 3.08s\tremaining: 11.7s\n",
      "208:\tlearn: 0.6145818\ttotal: 3.1s\tremaining: 11.7s\n",
      "209:\tlearn: 0.6143814\ttotal: 3.11s\tremaining: 11.7s\n",
      "210:\tlearn: 0.6137556\ttotal: 3.13s\tremaining: 11.7s\n",
      "211:\tlearn: 0.6135339\ttotal: 3.14s\tremaining: 11.7s\n",
      "212:\tlearn: 0.6132181\ttotal: 3.16s\tremaining: 11.7s\n",
      "213:\tlearn: 0.6130605\ttotal: 3.17s\tremaining: 11.6s\n",
      "214:\tlearn: 0.6128630\ttotal: 3.18s\tremaining: 11.6s\n",
      "215:\tlearn: 0.6125393\ttotal: 3.19s\tremaining: 11.6s\n",
      "216:\tlearn: 0.6123107\ttotal: 3.21s\tremaining: 11.6s\n",
      "217:\tlearn: 0.6119621\ttotal: 3.22s\tremaining: 11.6s\n",
      "218:\tlearn: 0.6115343\ttotal: 3.23s\tremaining: 11.5s\n",
      "219:\tlearn: 0.6106923\ttotal: 3.25s\tremaining: 11.5s\n",
      "220:\tlearn: 0.6104968\ttotal: 3.26s\tremaining: 11.5s\n",
      "221:\tlearn: 0.6101394\ttotal: 3.27s\tremaining: 11.5s\n",
      "222:\tlearn: 0.6100304\ttotal: 3.29s\tremaining: 11.5s\n",
      "223:\tlearn: 0.6097240\ttotal: 3.3s\tremaining: 11.4s\n",
      "224:\tlearn: 0.6094022\ttotal: 3.31s\tremaining: 11.4s\n",
      "225:\tlearn: 0.6085117\ttotal: 3.33s\tremaining: 11.4s\n",
      "226:\tlearn: 0.6083658\ttotal: 3.34s\tremaining: 11.4s\n",
      "227:\tlearn: 0.6081952\ttotal: 3.36s\tremaining: 11.4s\n",
      "228:\tlearn: 0.6079728\ttotal: 3.37s\tremaining: 11.3s\n",
      "229:\tlearn: 0.6074463\ttotal: 3.38s\tremaining: 11.3s\n",
      "230:\tlearn: 0.6072509\ttotal: 3.4s\tremaining: 11.3s\n",
      "231:\tlearn: 0.6070447\ttotal: 3.41s\tremaining: 11.3s\n",
      "232:\tlearn: 0.6066516\ttotal: 3.42s\tremaining: 11.3s\n",
      "233:\tlearn: 0.6063889\ttotal: 3.44s\tremaining: 11.3s\n",
      "234:\tlearn: 0.6059543\ttotal: 3.45s\tremaining: 11.2s\n",
      "235:\tlearn: 0.6057674\ttotal: 3.47s\tremaining: 11.2s\n",
      "236:\tlearn: 0.6056626\ttotal: 3.48s\tremaining: 11.2s\n",
      "237:\tlearn: 0.6054901\ttotal: 3.5s\tremaining: 11.2s\n",
      "238:\tlearn: 0.6051459\ttotal: 3.55s\tremaining: 11.3s\n",
      "239:\tlearn: 0.6044188\ttotal: 3.58s\tremaining: 11.3s\n",
      "240:\tlearn: 0.6037086\ttotal: 3.6s\tremaining: 11.4s\n",
      "241:\tlearn: 0.6035518\ttotal: 3.62s\tremaining: 11.3s\n",
      "242:\tlearn: 0.6032960\ttotal: 3.64s\tremaining: 11.3s\n",
      "243:\tlearn: 0.6030419\ttotal: 3.65s\tremaining: 11.3s\n",
      "244:\tlearn: 0.6027470\ttotal: 3.67s\tremaining: 11.3s\n",
      "245:\tlearn: 0.6023443\ttotal: 3.69s\tremaining: 11.3s\n",
      "246:\tlearn: 0.6021962\ttotal: 3.7s\tremaining: 11.3s\n",
      "247:\tlearn: 0.6020190\ttotal: 3.71s\tremaining: 11.3s\n",
      "248:\tlearn: 0.6019301\ttotal: 3.73s\tremaining: 11.3s\n",
      "249:\tlearn: 0.6018291\ttotal: 3.74s\tremaining: 11.2s\n",
      "250:\tlearn: 0.6017071\ttotal: 3.76s\tremaining: 11.2s\n",
      "251:\tlearn: 0.6015167\ttotal: 3.78s\tremaining: 11.2s\n",
      "252:\tlearn: 0.6014598\ttotal: 3.8s\tremaining: 11.2s\n",
      "253:\tlearn: 0.6013365\ttotal: 3.81s\tremaining: 11.2s\n",
      "254:\tlearn: 0.6010740\ttotal: 3.83s\tremaining: 11.2s\n",
      "255:\tlearn: 0.6009015\ttotal: 3.85s\tremaining: 11.2s\n",
      "256:\tlearn: 0.6007638\ttotal: 3.86s\tremaining: 11.2s\n",
      "257:\tlearn: 0.6005821\ttotal: 3.88s\tremaining: 11.2s\n",
      "258:\tlearn: 0.6003392\ttotal: 3.89s\tremaining: 11.1s\n",
      "259:\tlearn: 0.6001419\ttotal: 3.91s\tremaining: 11.1s\n",
      "260:\tlearn: 0.5999991\ttotal: 3.92s\tremaining: 11.1s\n",
      "261:\tlearn: 0.5998782\ttotal: 3.94s\tremaining: 11.1s\n",
      "262:\tlearn: 0.5995941\ttotal: 3.96s\tremaining: 11.1s\n",
      "263:\tlearn: 0.5993447\ttotal: 3.97s\tremaining: 11.1s\n",
      "264:\tlearn: 0.5991269\ttotal: 3.99s\tremaining: 11.1s\n",
      "265:\tlearn: 0.5989501\ttotal: 4s\tremaining: 11.1s\n",
      "266:\tlearn: 0.5987346\ttotal: 4.02s\tremaining: 11s\n",
      "267:\tlearn: 0.5986020\ttotal: 4.04s\tremaining: 11s\n",
      "268:\tlearn: 0.5984923\ttotal: 4.06s\tremaining: 11s\n",
      "269:\tlearn: 0.5982770\ttotal: 4.07s\tremaining: 11s\n",
      "270:\tlearn: 0.5978427\ttotal: 4.09s\tremaining: 11s\n",
      "271:\tlearn: 0.5975925\ttotal: 4.1s\tremaining: 11s\n",
      "272:\tlearn: 0.5973558\ttotal: 4.12s\tremaining: 11s\n",
      "273:\tlearn: 0.5971961\ttotal: 4.13s\tremaining: 10.9s\n",
      "274:\tlearn: 0.5970383\ttotal: 4.15s\tremaining: 10.9s\n",
      "275:\tlearn: 0.5969331\ttotal: 4.16s\tremaining: 10.9s\n",
      "276:\tlearn: 0.5965842\ttotal: 4.17s\tremaining: 10.9s\n",
      "277:\tlearn: 0.5963360\ttotal: 4.19s\tremaining: 10.9s\n",
      "278:\tlearn: 0.5958790\ttotal: 4.21s\tremaining: 10.9s\n",
      "279:\tlearn: 0.5953829\ttotal: 4.22s\tremaining: 10.9s\n",
      "280:\tlearn: 0.5951285\ttotal: 4.24s\tremaining: 10.8s\n",
      "281:\tlearn: 0.5949967\ttotal: 4.25s\tremaining: 10.8s\n",
      "282:\tlearn: 0.5948014\ttotal: 4.26s\tremaining: 10.8s\n",
      "283:\tlearn: 0.5946288\ttotal: 4.28s\tremaining: 10.8s\n",
      "284:\tlearn: 0.5944599\ttotal: 4.3s\tremaining: 10.8s\n",
      "285:\tlearn: 0.5941990\ttotal: 4.31s\tremaining: 10.8s\n",
      "286:\tlearn: 0.5940257\ttotal: 4.33s\tremaining: 10.8s\n",
      "287:\tlearn: 0.5937304\ttotal: 4.34s\tremaining: 10.7s\n",
      "288:\tlearn: 0.5936040\ttotal: 4.36s\tremaining: 10.7s\n",
      "289:\tlearn: 0.5935121\ttotal: 4.38s\tremaining: 10.7s\n",
      "290:\tlearn: 0.5934290\ttotal: 4.39s\tremaining: 10.7s\n",
      "291:\tlearn: 0.5931888\ttotal: 4.41s\tremaining: 10.7s\n",
      "292:\tlearn: 0.5930065\ttotal: 4.42s\tremaining: 10.7s\n",
      "293:\tlearn: 0.5929037\ttotal: 4.44s\tremaining: 10.7s\n",
      "294:\tlearn: 0.5925763\ttotal: 4.45s\tremaining: 10.6s\n",
      "295:\tlearn: 0.5924579\ttotal: 4.46s\tremaining: 10.6s\n",
      "296:\tlearn: 0.5923932\ttotal: 4.47s\tremaining: 10.6s\n",
      "297:\tlearn: 0.5917959\ttotal: 4.49s\tremaining: 10.6s\n",
      "298:\tlearn: 0.5916453\ttotal: 4.5s\tremaining: 10.6s\n",
      "299:\tlearn: 0.5915238\ttotal: 4.51s\tremaining: 10.5s\n",
      "300:\tlearn: 0.5913984\ttotal: 4.53s\tremaining: 10.5s\n",
      "301:\tlearn: 0.5912668\ttotal: 4.54s\tremaining: 10.5s\n",
      "302:\tlearn: 0.5911220\ttotal: 4.55s\tremaining: 10.5s\n",
      "303:\tlearn: 0.5909333\ttotal: 4.57s\tremaining: 10.5s\n",
      "304:\tlearn: 0.5902670\ttotal: 4.58s\tremaining: 10.4s\n",
      "305:\tlearn: 0.5901231\ttotal: 4.6s\tremaining: 10.4s\n",
      "306:\tlearn: 0.5899706\ttotal: 4.62s\tremaining: 10.4s\n",
      "307:\tlearn: 0.5898461\ttotal: 4.63s\tremaining: 10.4s\n",
      "308:\tlearn: 0.5897211\ttotal: 4.64s\tremaining: 10.4s\n",
      "309:\tlearn: 0.5896434\ttotal: 4.66s\tremaining: 10.4s\n",
      "310:\tlearn: 0.5894962\ttotal: 4.67s\tremaining: 10.3s\n",
      "311:\tlearn: 0.5893336\ttotal: 4.68s\tremaining: 10.3s\n",
      "312:\tlearn: 0.5891862\ttotal: 4.7s\tremaining: 10.3s\n",
      "313:\tlearn: 0.5890882\ttotal: 4.71s\tremaining: 10.3s\n",
      "314:\tlearn: 0.5889441\ttotal: 4.72s\tremaining: 10.3s\n",
      "315:\tlearn: 0.5888506\ttotal: 4.74s\tremaining: 10.3s\n",
      "316:\tlearn: 0.5886651\ttotal: 4.75s\tremaining: 10.2s\n",
      "317:\tlearn: 0.5884247\ttotal: 4.76s\tremaining: 10.2s\n",
      "318:\tlearn: 0.5882352\ttotal: 4.78s\tremaining: 10.2s\n",
      "319:\tlearn: 0.5880992\ttotal: 4.8s\tremaining: 10.2s\n",
      "320:\tlearn: 0.5879517\ttotal: 4.82s\tremaining: 10.2s\n",
      "321:\tlearn: 0.5877785\ttotal: 4.83s\tremaining: 10.2s\n",
      "322:\tlearn: 0.5876470\ttotal: 4.85s\tremaining: 10.2s\n",
      "323:\tlearn: 0.5873564\ttotal: 4.87s\tremaining: 10.2s\n",
      "324:\tlearn: 0.5872160\ttotal: 4.88s\tremaining: 10.1s\n",
      "325:\tlearn: 0.5870580\ttotal: 4.9s\tremaining: 10.1s\n",
      "326:\tlearn: 0.5868537\ttotal: 4.92s\tremaining: 10.1s\n",
      "327:\tlearn: 0.5867517\ttotal: 4.93s\tremaining: 10.1s\n",
      "328:\tlearn: 0.5866738\ttotal: 4.95s\tremaining: 10.1s\n",
      "329:\tlearn: 0.5865175\ttotal: 4.97s\tremaining: 10.1s\n",
      "330:\tlearn: 0.5863519\ttotal: 4.98s\tremaining: 10.1s\n",
      "331:\tlearn: 0.5862074\ttotal: 5s\tremaining: 10.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "332:\tlearn: 0.5860820\ttotal: 5.01s\tremaining: 10s\n",
      "333:\tlearn: 0.5859016\ttotal: 5.04s\tremaining: 10s\n",
      "334:\tlearn: 0.5856443\ttotal: 5.05s\tremaining: 10s\n",
      "335:\tlearn: 0.5854876\ttotal: 5.07s\tremaining: 10s\n",
      "336:\tlearn: 0.5853523\ttotal: 5.08s\tremaining: 10s\n",
      "337:\tlearn: 0.5851760\ttotal: 5.1s\tremaining: 9.99s\n",
      "338:\tlearn: 0.5850260\ttotal: 5.12s\tremaining: 9.98s\n",
      "339:\tlearn: 0.5848715\ttotal: 5.13s\tremaining: 9.97s\n",
      "340:\tlearn: 0.5847416\ttotal: 5.15s\tremaining: 9.96s\n",
      "341:\tlearn: 0.5845990\ttotal: 5.17s\tremaining: 9.94s\n",
      "342:\tlearn: 0.5843504\ttotal: 5.18s\tremaining: 9.93s\n",
      "343:\tlearn: 0.5842280\ttotal: 5.2s\tremaining: 9.92s\n",
      "344:\tlearn: 0.5839951\ttotal: 5.22s\tremaining: 9.9s\n",
      "345:\tlearn: 0.5838442\ttotal: 5.24s\tremaining: 9.9s\n",
      "346:\tlearn: 0.5837196\ttotal: 5.25s\tremaining: 9.88s\n",
      "347:\tlearn: 0.5836074\ttotal: 5.27s\tremaining: 9.87s\n",
      "348:\tlearn: 0.5835173\ttotal: 5.28s\tremaining: 9.85s\n",
      "349:\tlearn: 0.5834192\ttotal: 5.3s\tremaining: 9.84s\n",
      "350:\tlearn: 0.5832874\ttotal: 5.31s\tremaining: 9.83s\n",
      "351:\tlearn: 0.5832399\ttotal: 5.33s\tremaining: 9.81s\n",
      "352:\tlearn: 0.5830730\ttotal: 5.34s\tremaining: 9.79s\n",
      "353:\tlearn: 0.5829865\ttotal: 5.36s\tremaining: 9.78s\n",
      "354:\tlearn: 0.5828636\ttotal: 5.37s\tremaining: 9.76s\n",
      "355:\tlearn: 0.5824773\ttotal: 5.39s\tremaining: 9.74s\n",
      "356:\tlearn: 0.5823663\ttotal: 5.4s\tremaining: 9.73s\n",
      "357:\tlearn: 0.5822268\ttotal: 5.42s\tremaining: 9.72s\n",
      "358:\tlearn: 0.5820074\ttotal: 5.44s\tremaining: 9.71s\n",
      "359:\tlearn: 0.5818590\ttotal: 5.45s\tremaining: 9.7s\n",
      "360:\tlearn: 0.5817664\ttotal: 5.47s\tremaining: 9.68s\n",
      "361:\tlearn: 0.5816793\ttotal: 5.49s\tremaining: 9.67s\n",
      "362:\tlearn: 0.5815192\ttotal: 5.5s\tremaining: 9.65s\n",
      "363:\tlearn: 0.5814175\ttotal: 5.51s\tremaining: 9.63s\n",
      "364:\tlearn: 0.5812784\ttotal: 5.53s\tremaining: 9.62s\n",
      "365:\tlearn: 0.5811550\ttotal: 5.55s\tremaining: 9.61s\n",
      "366:\tlearn: 0.5809610\ttotal: 5.56s\tremaining: 9.59s\n",
      "367:\tlearn: 0.5807853\ttotal: 5.58s\tremaining: 9.58s\n",
      "368:\tlearn: 0.5807095\ttotal: 5.59s\tremaining: 9.56s\n",
      "369:\tlearn: 0.5805997\ttotal: 5.61s\tremaining: 9.55s\n",
      "370:\tlearn: 0.5803217\ttotal: 5.62s\tremaining: 9.53s\n",
      "371:\tlearn: 0.5802427\ttotal: 5.64s\tremaining: 9.52s\n",
      "372:\tlearn: 0.5801514\ttotal: 5.65s\tremaining: 9.5s\n",
      "373:\tlearn: 0.5800456\ttotal: 5.67s\tremaining: 9.49s\n",
      "374:\tlearn: 0.5799541\ttotal: 5.68s\tremaining: 9.47s\n",
      "375:\tlearn: 0.5797621\ttotal: 5.69s\tremaining: 9.45s\n",
      "376:\tlearn: 0.5796661\ttotal: 5.71s\tremaining: 9.44s\n",
      "377:\tlearn: 0.5795445\ttotal: 5.72s\tremaining: 9.42s\n",
      "378:\tlearn: 0.5793999\ttotal: 5.74s\tremaining: 9.4s\n",
      "379:\tlearn: 0.5792993\ttotal: 5.75s\tremaining: 9.39s\n",
      "380:\tlearn: 0.5791973\ttotal: 5.77s\tremaining: 9.37s\n",
      "381:\tlearn: 0.5791179\ttotal: 5.78s\tremaining: 9.35s\n",
      "382:\tlearn: 0.5789945\ttotal: 5.79s\tremaining: 9.33s\n",
      "383:\tlearn: 0.5788768\ttotal: 5.81s\tremaining: 9.32s\n",
      "384:\tlearn: 0.5783711\ttotal: 5.82s\tremaining: 9.3s\n",
      "385:\tlearn: 0.5779736\ttotal: 5.84s\tremaining: 9.29s\n",
      "386:\tlearn: 0.5778987\ttotal: 5.86s\tremaining: 9.29s\n",
      "387:\tlearn: 0.5778151\ttotal: 5.89s\tremaining: 9.28s\n",
      "388:\tlearn: 0.5777216\ttotal: 5.9s\tremaining: 9.27s\n",
      "389:\tlearn: 0.5776636\ttotal: 5.92s\tremaining: 9.26s\n",
      "390:\tlearn: 0.5775612\ttotal: 5.93s\tremaining: 9.24s\n",
      "391:\tlearn: 0.5774560\ttotal: 5.95s\tremaining: 9.23s\n",
      "392:\tlearn: 0.5772137\ttotal: 5.97s\tremaining: 9.21s\n",
      "393:\tlearn: 0.5770490\ttotal: 5.99s\tremaining: 9.21s\n",
      "394:\tlearn: 0.5769890\ttotal: 6s\tremaining: 9.19s\n",
      "395:\tlearn: 0.5769151\ttotal: 6.02s\tremaining: 9.18s\n",
      "396:\tlearn: 0.5767595\ttotal: 6.03s\tremaining: 9.16s\n",
      "397:\tlearn: 0.5766948\ttotal: 6.05s\tremaining: 9.15s\n",
      "398:\tlearn: 0.5766134\ttotal: 6.06s\tremaining: 9.13s\n",
      "399:\tlearn: 0.5765167\ttotal: 6.08s\tremaining: 9.12s\n",
      "400:\tlearn: 0.5763837\ttotal: 6.1s\tremaining: 9.11s\n",
      "401:\tlearn: 0.5762170\ttotal: 6.12s\tremaining: 9.1s\n",
      "402:\tlearn: 0.5760489\ttotal: 6.13s\tremaining: 9.08s\n",
      "403:\tlearn: 0.5759566\ttotal: 6.15s\tremaining: 9.07s\n",
      "404:\tlearn: 0.5758400\ttotal: 6.16s\tremaining: 9.05s\n",
      "405:\tlearn: 0.5756588\ttotal: 6.18s\tremaining: 9.04s\n",
      "406:\tlearn: 0.5755385\ttotal: 6.2s\tremaining: 9.03s\n",
      "407:\tlearn: 0.5754037\ttotal: 6.21s\tremaining: 9.01s\n",
      "408:\tlearn: 0.5752839\ttotal: 6.23s\tremaining: 9s\n",
      "409:\tlearn: 0.5751876\ttotal: 6.24s\tremaining: 8.98s\n",
      "410:\tlearn: 0.5748903\ttotal: 6.26s\tremaining: 8.97s\n",
      "411:\tlearn: 0.5748413\ttotal: 6.28s\tremaining: 8.96s\n",
      "412:\tlearn: 0.5746831\ttotal: 6.29s\tremaining: 8.94s\n",
      "413:\tlearn: 0.5746329\ttotal: 6.31s\tremaining: 8.93s\n",
      "414:\tlearn: 0.5745527\ttotal: 6.33s\tremaining: 8.92s\n",
      "415:\tlearn: 0.5744444\ttotal: 6.34s\tremaining: 8.9s\n",
      "416:\tlearn: 0.5743135\ttotal: 6.36s\tremaining: 8.89s\n",
      "417:\tlearn: 0.5741832\ttotal: 6.37s\tremaining: 8.87s\n",
      "418:\tlearn: 0.5740697\ttotal: 6.39s\tremaining: 8.86s\n",
      "419:\tlearn: 0.5739755\ttotal: 6.4s\tremaining: 8.84s\n",
      "420:\tlearn: 0.5738698\ttotal: 6.42s\tremaining: 8.83s\n",
      "421:\tlearn: 0.5737977\ttotal: 6.43s\tremaining: 8.81s\n",
      "422:\tlearn: 0.5736485\ttotal: 6.45s\tremaining: 8.79s\n",
      "423:\tlearn: 0.5735867\ttotal: 6.46s\tremaining: 8.78s\n",
      "424:\tlearn: 0.5733806\ttotal: 6.48s\tremaining: 8.77s\n",
      "425:\tlearn: 0.5732481\ttotal: 6.5s\tremaining: 8.76s\n",
      "426:\tlearn: 0.5731206\ttotal: 6.51s\tremaining: 8.74s\n",
      "427:\tlearn: 0.5730480\ttotal: 6.53s\tremaining: 8.73s\n",
      "428:\tlearn: 0.5729189\ttotal: 6.54s\tremaining: 8.71s\n",
      "429:\tlearn: 0.5728390\ttotal: 6.56s\tremaining: 8.7s\n",
      "430:\tlearn: 0.5727245\ttotal: 6.58s\tremaining: 8.68s\n",
      "431:\tlearn: 0.5726461\ttotal: 6.59s\tremaining: 8.67s\n",
      "432:\tlearn: 0.5722733\ttotal: 6.61s\tremaining: 8.65s\n",
      "433:\tlearn: 0.5721480\ttotal: 6.62s\tremaining: 8.64s\n",
      "434:\tlearn: 0.5720592\ttotal: 6.64s\tremaining: 8.62s\n",
      "435:\tlearn: 0.5719643\ttotal: 6.66s\tremaining: 8.61s\n",
      "436:\tlearn: 0.5718669\ttotal: 6.67s\tremaining: 8.59s\n",
      "437:\tlearn: 0.5717957\ttotal: 6.69s\tremaining: 8.58s\n",
      "438:\tlearn: 0.5717071\ttotal: 6.71s\tremaining: 8.57s\n",
      "439:\tlearn: 0.5716242\ttotal: 6.72s\tremaining: 8.55s\n",
      "440:\tlearn: 0.5715475\ttotal: 6.74s\tremaining: 8.54s\n",
      "441:\tlearn: 0.5714887\ttotal: 6.75s\tremaining: 8.53s\n",
      "442:\tlearn: 0.5713940\ttotal: 6.77s\tremaining: 8.51s\n",
      "443:\tlearn: 0.5712986\ttotal: 6.79s\tremaining: 8.5s\n",
      "444:\tlearn: 0.5712433\ttotal: 6.8s\tremaining: 8.48s\n",
      "445:\tlearn: 0.5711927\ttotal: 6.82s\tremaining: 8.47s\n",
      "446:\tlearn: 0.5709745\ttotal: 6.83s\tremaining: 8.45s\n",
      "447:\tlearn: 0.5709139\ttotal: 6.85s\tremaining: 8.44s\n",
      "448:\tlearn: 0.5708248\ttotal: 6.86s\tremaining: 8.42s\n",
      "449:\tlearn: 0.5707330\ttotal: 6.88s\tremaining: 8.41s\n",
      "450:\tlearn: 0.5705999\ttotal: 6.9s\tremaining: 8.4s\n",
      "451:\tlearn: 0.5705477\ttotal: 6.91s\tremaining: 8.38s\n",
      "452:\tlearn: 0.5704431\ttotal: 6.93s\tremaining: 8.37s\n",
      "453:\tlearn: 0.5703788\ttotal: 6.94s\tremaining: 8.35s\n",
      "454:\tlearn: 0.5703023\ttotal: 6.96s\tremaining: 8.33s\n",
      "455:\tlearn: 0.5702365\ttotal: 6.97s\tremaining: 8.32s\n",
      "456:\tlearn: 0.5701647\ttotal: 6.99s\tremaining: 8.3s\n",
      "457:\tlearn: 0.5700977\ttotal: 7s\tremaining: 8.28s\n",
      "458:\tlearn: 0.5700210\ttotal: 7.01s\tremaining: 8.27s\n",
      "459:\tlearn: 0.5699823\ttotal: 7.03s\tremaining: 8.25s\n",
      "460:\tlearn: 0.5698379\ttotal: 7.04s\tremaining: 8.23s\n",
      "461:\tlearn: 0.5697681\ttotal: 7.06s\tremaining: 8.22s\n",
      "462:\tlearn: 0.5697133\ttotal: 7.07s\tremaining: 8.2s\n",
      "463:\tlearn: 0.5696165\ttotal: 7.09s\tremaining: 8.19s\n",
      "464:\tlearn: 0.5694989\ttotal: 7.11s\tremaining: 8.18s\n",
      "465:\tlearn: 0.5694507\ttotal: 7.12s\tremaining: 8.16s\n",
      "466:\tlearn: 0.5693343\ttotal: 7.14s\tremaining: 8.15s\n",
      "467:\tlearn: 0.5692774\ttotal: 7.16s\tremaining: 8.13s\n",
      "468:\tlearn: 0.5688993\ttotal: 7.17s\tremaining: 8.12s\n",
      "469:\tlearn: 0.5687990\ttotal: 7.19s\tremaining: 8.1s\n",
      "470:\tlearn: 0.5686917\ttotal: 7.2s\tremaining: 8.09s\n",
      "471:\tlearn: 0.5686258\ttotal: 7.22s\tremaining: 8.08s\n",
      "472:\tlearn: 0.5679314\ttotal: 7.24s\tremaining: 8.06s\n",
      "473:\tlearn: 0.5678285\ttotal: 7.25s\tremaining: 8.04s\n",
      "474:\tlearn: 0.5676259\ttotal: 7.26s\tremaining: 8.03s\n",
      "475:\tlearn: 0.5675480\ttotal: 7.28s\tremaining: 8.02s\n",
      "476:\tlearn: 0.5675022\ttotal: 7.3s\tremaining: 8s\n",
      "477:\tlearn: 0.5674530\ttotal: 7.32s\tremaining: 7.99s\n",
      "478:\tlearn: 0.5673667\ttotal: 7.33s\tremaining: 7.97s\n",
      "479:\tlearn: 0.5673008\ttotal: 7.35s\tremaining: 7.96s\n",
      "480:\tlearn: 0.5672188\ttotal: 7.37s\tremaining: 7.95s\n",
      "481:\tlearn: 0.5670917\ttotal: 7.38s\tremaining: 7.93s\n",
      "482:\tlearn: 0.5670128\ttotal: 7.4s\tremaining: 7.92s\n",
      "483:\tlearn: 0.5669642\ttotal: 7.41s\tremaining: 7.9s\n",
      "484:\tlearn: 0.5669075\ttotal: 7.42s\tremaining: 7.88s\n",
      "485:\tlearn: 0.5668259\ttotal: 7.44s\tremaining: 7.87s\n",
      "486:\tlearn: 0.5667891\ttotal: 7.45s\tremaining: 7.85s\n",
      "487:\tlearn: 0.5667108\ttotal: 7.47s\tremaining: 7.84s\n",
      "488:\tlearn: 0.5666512\ttotal: 7.48s\tremaining: 7.82s\n",
      "489:\tlearn: 0.5665763\ttotal: 7.5s\tremaining: 7.8s\n",
      "490:\tlearn: 0.5665064\ttotal: 7.52s\tremaining: 7.79s\n",
      "491:\tlearn: 0.5663161\ttotal: 7.53s\tremaining: 7.78s\n",
      "492:\tlearn: 0.5661655\ttotal: 7.55s\tremaining: 7.76s\n",
      "493:\tlearn: 0.5657141\ttotal: 7.57s\tremaining: 7.75s\n",
      "494:\tlearn: 0.5656567\ttotal: 7.58s\tremaining: 7.73s\n",
      "495:\tlearn: 0.5654978\ttotal: 7.6s\tremaining: 7.72s\n",
      "496:\tlearn: 0.5654286\ttotal: 7.61s\tremaining: 7.7s\n",
      "497:\tlearn: 0.5653694\ttotal: 7.63s\tremaining: 7.69s\n",
      "498:\tlearn: 0.5653041\ttotal: 7.64s\tremaining: 7.67s\n",
      "499:\tlearn: 0.5652750\ttotal: 7.66s\tremaining: 7.66s\n",
      "500:\tlearn: 0.5651008\ttotal: 7.67s\tremaining: 7.64s\n",
      "501:\tlearn: 0.5650091\ttotal: 7.69s\tremaining: 7.63s\n",
      "502:\tlearn: 0.5649775\ttotal: 7.7s\tremaining: 7.61s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "503:\tlearn: 0.5649284\ttotal: 7.72s\tremaining: 7.59s\n",
      "504:\tlearn: 0.5648649\ttotal: 7.73s\tremaining: 7.58s\n",
      "505:\tlearn: 0.5648123\ttotal: 7.76s\tremaining: 7.57s\n",
      "506:\tlearn: 0.5647464\ttotal: 7.77s\tremaining: 7.56s\n",
      "507:\tlearn: 0.5644357\ttotal: 7.79s\tremaining: 7.54s\n",
      "508:\tlearn: 0.5643676\ttotal: 7.81s\tremaining: 7.53s\n",
      "509:\tlearn: 0.5642833\ttotal: 7.82s\tremaining: 7.51s\n",
      "510:\tlearn: 0.5641621\ttotal: 7.84s\tremaining: 7.5s\n",
      "511:\tlearn: 0.5640578\ttotal: 7.85s\tremaining: 7.49s\n",
      "512:\tlearn: 0.5639958\ttotal: 7.87s\tremaining: 7.47s\n",
      "513:\tlearn: 0.5639356\ttotal: 7.88s\tremaining: 7.45s\n",
      "514:\tlearn: 0.5638699\ttotal: 7.9s\tremaining: 7.44s\n",
      "515:\tlearn: 0.5638288\ttotal: 7.91s\tremaining: 7.42s\n",
      "516:\tlearn: 0.5637588\ttotal: 7.93s\tremaining: 7.41s\n",
      "517:\tlearn: 0.5637228\ttotal: 7.95s\tremaining: 7.39s\n",
      "518:\tlearn: 0.5636511\ttotal: 7.96s\tremaining: 7.38s\n",
      "519:\tlearn: 0.5635988\ttotal: 7.98s\tremaining: 7.36s\n",
      "520:\tlearn: 0.5635351\ttotal: 7.99s\tremaining: 7.35s\n",
      "521:\tlearn: 0.5634700\ttotal: 8.01s\tremaining: 7.33s\n",
      "522:\tlearn: 0.5632245\ttotal: 8.02s\tremaining: 7.32s\n",
      "523:\tlearn: 0.5631454\ttotal: 8.04s\tremaining: 7.3s\n",
      "524:\tlearn: 0.5631157\ttotal: 8.05s\tremaining: 7.29s\n",
      "525:\tlearn: 0.5630629\ttotal: 8.07s\tremaining: 7.27s\n",
      "526:\tlearn: 0.5629908\ttotal: 8.09s\tremaining: 7.26s\n",
      "527:\tlearn: 0.5629377\ttotal: 8.1s\tremaining: 7.24s\n",
      "528:\tlearn: 0.5628565\ttotal: 8.11s\tremaining: 7.22s\n",
      "529:\tlearn: 0.5627777\ttotal: 8.13s\tremaining: 7.21s\n",
      "530:\tlearn: 0.5627266\ttotal: 8.15s\tremaining: 7.19s\n",
      "531:\tlearn: 0.5625162\ttotal: 8.16s\tremaining: 7.18s\n",
      "532:\tlearn: 0.5624461\ttotal: 8.18s\tremaining: 7.17s\n",
      "533:\tlearn: 0.5623605\ttotal: 8.19s\tremaining: 7.15s\n",
      "534:\tlearn: 0.5623312\ttotal: 8.2s\tremaining: 7.13s\n",
      "535:\tlearn: 0.5622565\ttotal: 8.22s\tremaining: 7.11s\n",
      "536:\tlearn: 0.5621519\ttotal: 8.23s\tremaining: 7.09s\n",
      "537:\tlearn: 0.5620548\ttotal: 8.24s\tremaining: 7.08s\n",
      "538:\tlearn: 0.5619908\ttotal: 8.26s\tremaining: 7.06s\n",
      "539:\tlearn: 0.5618740\ttotal: 8.27s\tremaining: 7.05s\n",
      "540:\tlearn: 0.5617987\ttotal: 8.29s\tremaining: 7.03s\n",
      "541:\tlearn: 0.5617354\ttotal: 8.3s\tremaining: 7.01s\n",
      "542:\tlearn: 0.5615710\ttotal: 8.32s\tremaining: 7s\n",
      "543:\tlearn: 0.5615089\ttotal: 8.33s\tremaining: 6.98s\n",
      "544:\tlearn: 0.5614336\ttotal: 8.34s\tremaining: 6.97s\n",
      "545:\tlearn: 0.5612304\ttotal: 8.36s\tremaining: 6.95s\n",
      "546:\tlearn: 0.5611660\ttotal: 8.37s\tremaining: 6.93s\n",
      "547:\tlearn: 0.5611114\ttotal: 8.39s\tremaining: 6.92s\n",
      "548:\tlearn: 0.5606494\ttotal: 8.4s\tremaining: 6.9s\n",
      "549:\tlearn: 0.5606012\ttotal: 8.41s\tremaining: 6.88s\n",
      "550:\tlearn: 0.5604170\ttotal: 8.43s\tremaining: 6.87s\n",
      "551:\tlearn: 0.5603564\ttotal: 8.45s\tremaining: 6.85s\n",
      "552:\tlearn: 0.5602904\ttotal: 8.46s\tremaining: 6.84s\n",
      "553:\tlearn: 0.5601095\ttotal: 8.47s\tremaining: 6.82s\n",
      "554:\tlearn: 0.5600368\ttotal: 8.49s\tremaining: 6.81s\n",
      "555:\tlearn: 0.5599772\ttotal: 8.51s\tremaining: 6.8s\n",
      "556:\tlearn: 0.5599003\ttotal: 8.53s\tremaining: 6.78s\n",
      "557:\tlearn: 0.5597860\ttotal: 8.55s\tremaining: 6.77s\n",
      "558:\tlearn: 0.5596270\ttotal: 8.56s\tremaining: 6.76s\n",
      "559:\tlearn: 0.5595842\ttotal: 8.58s\tremaining: 6.74s\n",
      "560:\tlearn: 0.5595175\ttotal: 8.6s\tremaining: 6.73s\n",
      "561:\tlearn: 0.5594844\ttotal: 8.62s\tremaining: 6.72s\n",
      "562:\tlearn: 0.5594286\ttotal: 8.63s\tremaining: 6.7s\n",
      "563:\tlearn: 0.5591004\ttotal: 8.65s\tremaining: 6.69s\n",
      "564:\tlearn: 0.5590627\ttotal: 8.67s\tremaining: 6.67s\n",
      "565:\tlearn: 0.5587997\ttotal: 8.68s\tremaining: 6.66s\n",
      "566:\tlearn: 0.5587465\ttotal: 8.7s\tremaining: 6.64s\n",
      "567:\tlearn: 0.5586411\ttotal: 8.71s\tremaining: 6.63s\n",
      "568:\tlearn: 0.5585791\ttotal: 8.73s\tremaining: 6.61s\n",
      "569:\tlearn: 0.5585190\ttotal: 8.74s\tremaining: 6.59s\n",
      "570:\tlearn: 0.5584726\ttotal: 8.76s\tremaining: 6.58s\n",
      "571:\tlearn: 0.5584234\ttotal: 8.77s\tremaining: 6.56s\n",
      "572:\tlearn: 0.5583593\ttotal: 8.79s\tremaining: 6.55s\n",
      "573:\tlearn: 0.5582528\ttotal: 8.8s\tremaining: 6.53s\n",
      "574:\tlearn: 0.5581491\ttotal: 8.82s\tremaining: 6.52s\n",
      "575:\tlearn: 0.5581125\ttotal: 8.84s\tremaining: 6.5s\n",
      "576:\tlearn: 0.5580849\ttotal: 8.85s\tremaining: 6.49s\n",
      "577:\tlearn: 0.5580091\ttotal: 8.87s\tremaining: 6.47s\n",
      "578:\tlearn: 0.5579487\ttotal: 8.88s\tremaining: 6.46s\n",
      "579:\tlearn: 0.5578832\ttotal: 8.9s\tremaining: 6.45s\n",
      "580:\tlearn: 0.5578456\ttotal: 8.92s\tremaining: 6.43s\n",
      "581:\tlearn: 0.5577547\ttotal: 8.93s\tremaining: 6.42s\n",
      "582:\tlearn: 0.5576858\ttotal: 8.95s\tremaining: 6.4s\n",
      "583:\tlearn: 0.5576369\ttotal: 8.97s\tremaining: 6.39s\n",
      "584:\tlearn: 0.5575998\ttotal: 9s\tremaining: 6.38s\n",
      "585:\tlearn: 0.5575452\ttotal: 9.03s\tremaining: 6.38s\n",
      "586:\tlearn: 0.5575089\ttotal: 9.05s\tremaining: 6.37s\n",
      "587:\tlearn: 0.5574671\ttotal: 9.08s\tremaining: 6.36s\n",
      "588:\tlearn: 0.5573979\ttotal: 9.12s\tremaining: 6.36s\n",
      "589:\tlearn: 0.5573017\ttotal: 9.14s\tremaining: 6.35s\n",
      "590:\tlearn: 0.5572425\ttotal: 9.17s\tremaining: 6.34s\n",
      "591:\tlearn: 0.5571648\ttotal: 9.19s\tremaining: 6.33s\n",
      "592:\tlearn: 0.5571207\ttotal: 9.22s\tremaining: 6.33s\n",
      "593:\tlearn: 0.5570301\ttotal: 9.25s\tremaining: 6.32s\n",
      "594:\tlearn: 0.5569493\ttotal: 9.27s\tremaining: 6.31s\n",
      "595:\tlearn: 0.5568956\ttotal: 9.29s\tremaining: 6.3s\n",
      "596:\tlearn: 0.5568338\ttotal: 9.31s\tremaining: 6.29s\n",
      "597:\tlearn: 0.5567228\ttotal: 9.33s\tremaining: 6.27s\n",
      "598:\tlearn: 0.5566711\ttotal: 9.35s\tremaining: 6.26s\n",
      "599:\tlearn: 0.5566199\ttotal: 9.37s\tremaining: 6.25s\n",
      "600:\tlearn: 0.5565535\ttotal: 9.39s\tremaining: 6.23s\n",
      "601:\tlearn: 0.5565143\ttotal: 9.41s\tremaining: 6.22s\n",
      "602:\tlearn: 0.5564782\ttotal: 9.43s\tremaining: 6.21s\n",
      "603:\tlearn: 0.5563543\ttotal: 9.45s\tremaining: 6.2s\n",
      "604:\tlearn: 0.5562965\ttotal: 9.47s\tremaining: 6.18s\n",
      "605:\tlearn: 0.5562042\ttotal: 9.49s\tremaining: 6.17s\n",
      "606:\tlearn: 0.5561526\ttotal: 9.51s\tremaining: 6.16s\n",
      "607:\tlearn: 0.5560679\ttotal: 9.55s\tremaining: 6.16s\n",
      "608:\tlearn: 0.5559786\ttotal: 9.58s\tremaining: 6.15s\n",
      "609:\tlearn: 0.5559276\ttotal: 9.6s\tremaining: 6.14s\n",
      "610:\tlearn: 0.5558760\ttotal: 9.63s\tremaining: 6.13s\n",
      "611:\tlearn: 0.5558094\ttotal: 9.65s\tremaining: 6.12s\n",
      "612:\tlearn: 0.5557515\ttotal: 9.67s\tremaining: 6.11s\n",
      "613:\tlearn: 0.5557032\ttotal: 9.69s\tremaining: 6.09s\n",
      "614:\tlearn: 0.5556469\ttotal: 9.71s\tremaining: 6.08s\n",
      "615:\tlearn: 0.5555883\ttotal: 9.73s\tremaining: 6.07s\n",
      "616:\tlearn: 0.5555319\ttotal: 9.75s\tremaining: 6.05s\n",
      "617:\tlearn: 0.5554571\ttotal: 9.76s\tremaining: 6.03s\n",
      "618:\tlearn: 0.5554004\ttotal: 9.78s\tremaining: 6.02s\n",
      "619:\tlearn: 0.5553175\ttotal: 9.8s\tremaining: 6s\n",
      "620:\tlearn: 0.5552778\ttotal: 9.81s\tremaining: 5.99s\n",
      "621:\tlearn: 0.5552397\ttotal: 9.83s\tremaining: 5.97s\n",
      "622:\tlearn: 0.5551881\ttotal: 9.85s\tremaining: 5.96s\n",
      "623:\tlearn: 0.5551496\ttotal: 9.86s\tremaining: 5.94s\n",
      "624:\tlearn: 0.5550982\ttotal: 9.88s\tremaining: 5.93s\n",
      "625:\tlearn: 0.5550519\ttotal: 9.9s\tremaining: 5.91s\n",
      "626:\tlearn: 0.5549777\ttotal: 9.91s\tremaining: 5.9s\n",
      "627:\tlearn: 0.5549244\ttotal: 9.93s\tremaining: 5.88s\n",
      "628:\tlearn: 0.5548796\ttotal: 9.94s\tremaining: 5.87s\n",
      "629:\tlearn: 0.5548211\ttotal: 9.96s\tremaining: 5.85s\n",
      "630:\tlearn: 0.5547353\ttotal: 9.98s\tremaining: 5.83s\n",
      "631:\tlearn: 0.5546733\ttotal: 9.99s\tremaining: 5.82s\n",
      "632:\tlearn: 0.5545956\ttotal: 10s\tremaining: 5.8s\n",
      "633:\tlearn: 0.5545342\ttotal: 10s\tremaining: 5.79s\n",
      "634:\tlearn: 0.5544851\ttotal: 10.1s\tremaining: 5.78s\n",
      "635:\tlearn: 0.5544283\ttotal: 10.1s\tremaining: 5.76s\n",
      "636:\tlearn: 0.5543493\ttotal: 10.1s\tremaining: 5.75s\n",
      "637:\tlearn: 0.5543006\ttotal: 10.1s\tremaining: 5.74s\n",
      "638:\tlearn: 0.5542598\ttotal: 10.1s\tremaining: 5.72s\n",
      "639:\tlearn: 0.5542296\ttotal: 10.2s\tremaining: 5.71s\n",
      "640:\tlearn: 0.5541999\ttotal: 10.2s\tremaining: 5.69s\n",
      "641:\tlearn: 0.5540427\ttotal: 10.2s\tremaining: 5.68s\n",
      "642:\tlearn: 0.5539606\ttotal: 10.2s\tremaining: 5.66s\n",
      "643:\tlearn: 0.5538941\ttotal: 10.2s\tremaining: 5.64s\n",
      "644:\tlearn: 0.5538417\ttotal: 10.2s\tremaining: 5.63s\n",
      "645:\tlearn: 0.5537833\ttotal: 10.2s\tremaining: 5.61s\n",
      "646:\tlearn: 0.5537362\ttotal: 10.3s\tremaining: 5.59s\n",
      "647:\tlearn: 0.5536786\ttotal: 10.3s\tremaining: 5.58s\n",
      "648:\tlearn: 0.5536246\ttotal: 10.3s\tremaining: 5.56s\n",
      "649:\tlearn: 0.5535709\ttotal: 10.3s\tremaining: 5.54s\n",
      "650:\tlearn: 0.5535292\ttotal: 10.3s\tremaining: 5.53s\n",
      "651:\tlearn: 0.5534518\ttotal: 10.3s\tremaining: 5.51s\n",
      "652:\tlearn: 0.5533991\ttotal: 10.3s\tremaining: 5.49s\n",
      "653:\tlearn: 0.5533474\ttotal: 10.3s\tremaining: 5.48s\n",
      "654:\tlearn: 0.5533050\ttotal: 10.4s\tremaining: 5.46s\n",
      "655:\tlearn: 0.5532084\ttotal: 10.4s\tremaining: 5.44s\n",
      "656:\tlearn: 0.5531538\ttotal: 10.4s\tremaining: 5.42s\n",
      "657:\tlearn: 0.5529329\ttotal: 10.4s\tremaining: 5.41s\n",
      "658:\tlearn: 0.5528790\ttotal: 10.4s\tremaining: 5.39s\n",
      "659:\tlearn: 0.5528295\ttotal: 10.4s\tremaining: 5.37s\n",
      "660:\tlearn: 0.5527835\ttotal: 10.4s\tremaining: 5.36s\n",
      "661:\tlearn: 0.5527417\ttotal: 10.5s\tremaining: 5.34s\n",
      "662:\tlearn: 0.5526900\ttotal: 10.5s\tremaining: 5.32s\n",
      "663:\tlearn: 0.5526190\ttotal: 10.5s\tremaining: 5.31s\n",
      "664:\tlearn: 0.5525475\ttotal: 10.5s\tremaining: 5.29s\n",
      "665:\tlearn: 0.5524876\ttotal: 10.5s\tremaining: 5.27s\n",
      "666:\tlearn: 0.5524367\ttotal: 10.5s\tremaining: 5.25s\n",
      "667:\tlearn: 0.5523796\ttotal: 10.5s\tremaining: 5.24s\n",
      "668:\tlearn: 0.5523363\ttotal: 10.6s\tremaining: 5.22s\n",
      "669:\tlearn: 0.5522884\ttotal: 10.6s\tremaining: 5.2s\n",
      "670:\tlearn: 0.5522295\ttotal: 10.6s\tremaining: 5.19s\n",
      "671:\tlearn: 0.5521795\ttotal: 10.6s\tremaining: 5.17s\n",
      "672:\tlearn: 0.5521299\ttotal: 10.6s\tremaining: 5.15s\n",
      "673:\tlearn: 0.5521076\ttotal: 10.6s\tremaining: 5.13s\n",
      "674:\tlearn: 0.5517786\ttotal: 10.6s\tremaining: 5.12s\n",
      "675:\tlearn: 0.5517084\ttotal: 10.6s\tremaining: 5.1s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "676:\tlearn: 0.5516565\ttotal: 10.7s\tremaining: 5.08s\n",
      "677:\tlearn: 0.5516082\ttotal: 10.7s\tremaining: 5.07s\n",
      "678:\tlearn: 0.5515584\ttotal: 10.7s\tremaining: 5.05s\n",
      "679:\tlearn: 0.5515230\ttotal: 10.7s\tremaining: 5.03s\n",
      "680:\tlearn: 0.5514899\ttotal: 10.7s\tremaining: 5.02s\n",
      "681:\tlearn: 0.5513870\ttotal: 10.7s\tremaining: 5s\n",
      "682:\tlearn: 0.5513410\ttotal: 10.7s\tremaining: 4.98s\n",
      "683:\tlearn: 0.5513089\ttotal: 10.7s\tremaining: 4.96s\n",
      "684:\tlearn: 0.5512555\ttotal: 10.8s\tremaining: 4.95s\n",
      "685:\tlearn: 0.5512049\ttotal: 10.8s\tremaining: 4.93s\n",
      "686:\tlearn: 0.5511679\ttotal: 10.8s\tremaining: 4.92s\n",
      "687:\tlearn: 0.5510836\ttotal: 10.8s\tremaining: 4.9s\n",
      "688:\tlearn: 0.5510628\ttotal: 10.8s\tremaining: 4.88s\n",
      "689:\tlearn: 0.5510117\ttotal: 10.8s\tremaining: 4.87s\n",
      "690:\tlearn: 0.5509362\ttotal: 10.8s\tremaining: 4.85s\n",
      "691:\tlearn: 0.5508886\ttotal: 10.9s\tremaining: 4.83s\n",
      "692:\tlearn: 0.5508613\ttotal: 10.9s\tremaining: 4.81s\n",
      "693:\tlearn: 0.5508216\ttotal: 10.9s\tremaining: 4.8s\n",
      "694:\tlearn: 0.5507523\ttotal: 10.9s\tremaining: 4.78s\n",
      "695:\tlearn: 0.5507182\ttotal: 10.9s\tremaining: 4.76s\n",
      "696:\tlearn: 0.5506595\ttotal: 10.9s\tremaining: 4.75s\n",
      "697:\tlearn: 0.5506329\ttotal: 10.9s\tremaining: 4.73s\n",
      "698:\tlearn: 0.5505867\ttotal: 10.9s\tremaining: 4.71s\n",
      "699:\tlearn: 0.5505246\ttotal: 11s\tremaining: 4.7s\n",
      "700:\tlearn: 0.5504592\ttotal: 11s\tremaining: 4.68s\n",
      "701:\tlearn: 0.5504005\ttotal: 11s\tremaining: 4.67s\n",
      "702:\tlearn: 0.5503776\ttotal: 11s\tremaining: 4.65s\n",
      "703:\tlearn: 0.5503213\ttotal: 11s\tremaining: 4.63s\n",
      "704:\tlearn: 0.5502914\ttotal: 11s\tremaining: 4.62s\n",
      "705:\tlearn: 0.5502513\ttotal: 11s\tremaining: 4.6s\n",
      "706:\tlearn: 0.5501971\ttotal: 11.1s\tremaining: 4.58s\n",
      "707:\tlearn: 0.5501376\ttotal: 11.1s\tremaining: 4.57s\n",
      "708:\tlearn: 0.5500887\ttotal: 11.1s\tremaining: 4.55s\n",
      "709:\tlearn: 0.5500051\ttotal: 11.1s\tremaining: 4.53s\n",
      "710:\tlearn: 0.5499735\ttotal: 11.1s\tremaining: 4.52s\n",
      "711:\tlearn: 0.5499389\ttotal: 11.1s\tremaining: 4.5s\n",
      "712:\tlearn: 0.5499044\ttotal: 11.1s\tremaining: 4.48s\n",
      "713:\tlearn: 0.5498744\ttotal: 11.2s\tremaining: 4.47s\n",
      "714:\tlearn: 0.5498271\ttotal: 11.2s\tremaining: 4.45s\n",
      "715:\tlearn: 0.5497925\ttotal: 11.2s\tremaining: 4.43s\n",
      "716:\tlearn: 0.5497263\ttotal: 11.2s\tremaining: 4.42s\n",
      "717:\tlearn: 0.5496625\ttotal: 11.2s\tremaining: 4.4s\n",
      "718:\tlearn: 0.5495896\ttotal: 11.2s\tremaining: 4.39s\n",
      "719:\tlearn: 0.5495129\ttotal: 11.2s\tremaining: 4.37s\n",
      "720:\tlearn: 0.5494688\ttotal: 11.2s\tremaining: 4.35s\n",
      "721:\tlearn: 0.5494331\ttotal: 11.3s\tremaining: 4.34s\n",
      "722:\tlearn: 0.5493719\ttotal: 11.3s\tremaining: 4.32s\n",
      "723:\tlearn: 0.5493122\ttotal: 11.3s\tremaining: 4.3s\n",
      "724:\tlearn: 0.5492721\ttotal: 11.3s\tremaining: 4.29s\n",
      "725:\tlearn: 0.5492310\ttotal: 11.3s\tremaining: 4.27s\n",
      "726:\tlearn: 0.5491860\ttotal: 11.3s\tremaining: 4.25s\n",
      "727:\tlearn: 0.5491428\ttotal: 11.3s\tremaining: 4.24s\n",
      "728:\tlearn: 0.5490821\ttotal: 11.4s\tremaining: 4.22s\n",
      "729:\tlearn: 0.5490490\ttotal: 11.4s\tremaining: 4.21s\n",
      "730:\tlearn: 0.5490205\ttotal: 11.4s\tremaining: 4.19s\n",
      "731:\tlearn: 0.5489853\ttotal: 11.4s\tremaining: 4.17s\n",
      "732:\tlearn: 0.5489482\ttotal: 11.4s\tremaining: 4.16s\n",
      "733:\tlearn: 0.5489267\ttotal: 11.4s\tremaining: 4.14s\n",
      "734:\tlearn: 0.5488888\ttotal: 11.4s\tremaining: 4.12s\n",
      "735:\tlearn: 0.5488468\ttotal: 11.4s\tremaining: 4.11s\n",
      "736:\tlearn: 0.5486880\ttotal: 11.5s\tremaining: 4.09s\n",
      "737:\tlearn: 0.5486517\ttotal: 11.5s\tremaining: 4.07s\n",
      "738:\tlearn: 0.5486116\ttotal: 11.5s\tremaining: 4.06s\n",
      "739:\tlearn: 0.5485569\ttotal: 11.5s\tremaining: 4.04s\n",
      "740:\tlearn: 0.5485071\ttotal: 11.5s\tremaining: 4.02s\n",
      "741:\tlearn: 0.5484441\ttotal: 11.5s\tremaining: 4.01s\n",
      "742:\tlearn: 0.5484208\ttotal: 11.5s\tremaining: 3.99s\n",
      "743:\tlearn: 0.5483627\ttotal: 11.6s\tremaining: 3.98s\n",
      "744:\tlearn: 0.5482961\ttotal: 11.6s\tremaining: 3.96s\n",
      "745:\tlearn: 0.5482535\ttotal: 11.6s\tremaining: 3.94s\n",
      "746:\tlearn: 0.5482125\ttotal: 11.6s\tremaining: 3.93s\n",
      "747:\tlearn: 0.5481677\ttotal: 11.6s\tremaining: 3.91s\n",
      "748:\tlearn: 0.5481285\ttotal: 11.6s\tremaining: 3.89s\n",
      "749:\tlearn: 0.5480454\ttotal: 11.6s\tremaining: 3.88s\n",
      "750:\tlearn: 0.5480104\ttotal: 11.6s\tremaining: 3.86s\n",
      "751:\tlearn: 0.5479693\ttotal: 11.7s\tremaining: 3.85s\n",
      "752:\tlearn: 0.5479180\ttotal: 11.7s\tremaining: 3.83s\n",
      "753:\tlearn: 0.5478997\ttotal: 11.7s\tremaining: 3.81s\n",
      "754:\tlearn: 0.5477567\ttotal: 11.7s\tremaining: 3.8s\n",
      "755:\tlearn: 0.5477051\ttotal: 11.7s\tremaining: 3.78s\n",
      "756:\tlearn: 0.5476610\ttotal: 11.7s\tremaining: 3.76s\n",
      "757:\tlearn: 0.5476398\ttotal: 11.7s\tremaining: 3.75s\n",
      "758:\tlearn: 0.5476105\ttotal: 11.8s\tremaining: 3.73s\n",
      "759:\tlearn: 0.5475789\ttotal: 11.8s\tremaining: 3.71s\n",
      "760:\tlearn: 0.5475477\ttotal: 11.8s\tremaining: 3.7s\n",
      "761:\tlearn: 0.5475106\ttotal: 11.8s\tremaining: 3.68s\n",
      "762:\tlearn: 0.5474656\ttotal: 11.8s\tremaining: 3.67s\n",
      "763:\tlearn: 0.5473670\ttotal: 11.8s\tremaining: 3.65s\n",
      "764:\tlearn: 0.5473344\ttotal: 11.8s\tremaining: 3.63s\n",
      "765:\tlearn: 0.5473012\ttotal: 11.8s\tremaining: 3.62s\n",
      "766:\tlearn: 0.5472695\ttotal: 11.9s\tremaining: 3.6s\n",
      "767:\tlearn: 0.5472404\ttotal: 11.9s\tremaining: 3.58s\n",
      "768:\tlearn: 0.5472094\ttotal: 11.9s\tremaining: 3.57s\n",
      "769:\tlearn: 0.5471747\ttotal: 11.9s\tremaining: 3.55s\n",
      "770:\tlearn: 0.5471391\ttotal: 11.9s\tremaining: 3.54s\n",
      "771:\tlearn: 0.5470579\ttotal: 11.9s\tremaining: 3.52s\n",
      "772:\tlearn: 0.5470027\ttotal: 11.9s\tremaining: 3.5s\n",
      "773:\tlearn: 0.5469755\ttotal: 11.9s\tremaining: 3.49s\n",
      "774:\tlearn: 0.5469388\ttotal: 12s\tremaining: 3.47s\n",
      "775:\tlearn: 0.5469093\ttotal: 12s\tremaining: 3.46s\n",
      "776:\tlearn: 0.5468712\ttotal: 12s\tremaining: 3.44s\n",
      "777:\tlearn: 0.5468180\ttotal: 12s\tremaining: 3.42s\n",
      "778:\tlearn: 0.5467695\ttotal: 12s\tremaining: 3.41s\n",
      "779:\tlearn: 0.5467376\ttotal: 12s\tremaining: 3.39s\n",
      "780:\tlearn: 0.5467074\ttotal: 12s\tremaining: 3.38s\n",
      "781:\tlearn: 0.5466578\ttotal: 12.1s\tremaining: 3.36s\n",
      "782:\tlearn: 0.5466176\ttotal: 12.1s\tremaining: 3.34s\n",
      "783:\tlearn: 0.5465786\ttotal: 12.1s\tremaining: 3.33s\n",
      "784:\tlearn: 0.5465626\ttotal: 12.1s\tremaining: 3.31s\n",
      "785:\tlearn: 0.5465263\ttotal: 12.1s\tremaining: 3.29s\n",
      "786:\tlearn: 0.5464801\ttotal: 12.1s\tremaining: 3.28s\n",
      "787:\tlearn: 0.5464114\ttotal: 12.1s\tremaining: 3.26s\n",
      "788:\tlearn: 0.5463667\ttotal: 12.1s\tremaining: 3.25s\n",
      "789:\tlearn: 0.5463439\ttotal: 12.2s\tremaining: 3.23s\n",
      "790:\tlearn: 0.5463105\ttotal: 12.2s\tremaining: 3.22s\n",
      "791:\tlearn: 0.5462795\ttotal: 12.2s\tremaining: 3.2s\n",
      "792:\tlearn: 0.5461722\ttotal: 12.2s\tremaining: 3.18s\n",
      "793:\tlearn: 0.5461576\ttotal: 12.2s\tremaining: 3.17s\n",
      "794:\tlearn: 0.5461060\ttotal: 12.2s\tremaining: 3.15s\n",
      "795:\tlearn: 0.5460720\ttotal: 12.2s\tremaining: 3.13s\n",
      "796:\tlearn: 0.5460135\ttotal: 12.2s\tremaining: 3.12s\n",
      "797:\tlearn: 0.5459702\ttotal: 12.3s\tremaining: 3.1s\n",
      "798:\tlearn: 0.5459206\ttotal: 12.3s\tremaining: 3.09s\n",
      "799:\tlearn: 0.5458811\ttotal: 12.3s\tremaining: 3.07s\n",
      "800:\tlearn: 0.5458118\ttotal: 12.3s\tremaining: 3.06s\n",
      "801:\tlearn: 0.5457809\ttotal: 12.3s\tremaining: 3.04s\n",
      "802:\tlearn: 0.5457514\ttotal: 12.3s\tremaining: 3.02s\n",
      "803:\tlearn: 0.5457073\ttotal: 12.3s\tremaining: 3.01s\n",
      "804:\tlearn: 0.5456374\ttotal: 12.4s\tremaining: 2.99s\n",
      "805:\tlearn: 0.5455810\ttotal: 12.4s\tremaining: 2.98s\n",
      "806:\tlearn: 0.5454920\ttotal: 12.4s\tremaining: 2.96s\n",
      "807:\tlearn: 0.5454422\ttotal: 12.4s\tremaining: 2.94s\n",
      "808:\tlearn: 0.5453782\ttotal: 12.4s\tremaining: 2.93s\n",
      "809:\tlearn: 0.5453513\ttotal: 12.4s\tremaining: 2.91s\n",
      "810:\tlearn: 0.5453303\ttotal: 12.4s\tremaining: 2.9s\n",
      "811:\tlearn: 0.5453048\ttotal: 12.4s\tremaining: 2.88s\n",
      "812:\tlearn: 0.5449419\ttotal: 12.5s\tremaining: 2.87s\n",
      "813:\tlearn: 0.5449117\ttotal: 12.5s\tremaining: 2.85s\n",
      "814:\tlearn: 0.5448175\ttotal: 12.5s\tremaining: 2.83s\n",
      "815:\tlearn: 0.5447873\ttotal: 12.5s\tremaining: 2.82s\n",
      "816:\tlearn: 0.5445028\ttotal: 12.5s\tremaining: 2.8s\n",
      "817:\tlearn: 0.5444685\ttotal: 12.5s\tremaining: 2.79s\n",
      "818:\tlearn: 0.5444419\ttotal: 12.5s\tremaining: 2.77s\n",
      "819:\tlearn: 0.5444179\ttotal: 12.6s\tremaining: 2.75s\n",
      "820:\tlearn: 0.5443694\ttotal: 12.6s\tremaining: 2.74s\n",
      "821:\tlearn: 0.5443093\ttotal: 12.6s\tremaining: 2.72s\n",
      "822:\tlearn: 0.5442713\ttotal: 12.6s\tremaining: 2.71s\n",
      "823:\tlearn: 0.5441820\ttotal: 12.6s\tremaining: 2.69s\n",
      "824:\tlearn: 0.5441469\ttotal: 12.6s\tremaining: 2.68s\n",
      "825:\tlearn: 0.5441248\ttotal: 12.6s\tremaining: 2.66s\n",
      "826:\tlearn: 0.5439726\ttotal: 12.6s\tremaining: 2.65s\n",
      "827:\tlearn: 0.5439385\ttotal: 12.7s\tremaining: 2.63s\n",
      "828:\tlearn: 0.5439097\ttotal: 12.7s\tremaining: 2.61s\n",
      "829:\tlearn: 0.5438525\ttotal: 12.7s\tremaining: 2.6s\n",
      "830:\tlearn: 0.5438296\ttotal: 12.7s\tremaining: 2.58s\n",
      "831:\tlearn: 0.5437867\ttotal: 12.7s\tremaining: 2.57s\n",
      "832:\tlearn: 0.5436946\ttotal: 12.7s\tremaining: 2.55s\n",
      "833:\tlearn: 0.5436541\ttotal: 12.7s\tremaining: 2.54s\n",
      "834:\tlearn: 0.5436247\ttotal: 12.8s\tremaining: 2.52s\n",
      "835:\tlearn: 0.5435893\ttotal: 12.8s\tremaining: 2.5s\n",
      "836:\tlearn: 0.5435266\ttotal: 12.8s\tremaining: 2.49s\n",
      "837:\tlearn: 0.5434996\ttotal: 12.8s\tremaining: 2.47s\n",
      "838:\tlearn: 0.5434731\ttotal: 12.8s\tremaining: 2.46s\n",
      "839:\tlearn: 0.5434564\ttotal: 12.8s\tremaining: 2.44s\n",
      "840:\tlearn: 0.5434332\ttotal: 12.8s\tremaining: 2.43s\n",
      "841:\tlearn: 0.5434054\ttotal: 12.8s\tremaining: 2.41s\n",
      "842:\tlearn: 0.5433848\ttotal: 12.9s\tremaining: 2.4s\n",
      "843:\tlearn: 0.5433291\ttotal: 12.9s\tremaining: 2.38s\n",
      "844:\tlearn: 0.5432901\ttotal: 12.9s\tremaining: 2.36s\n",
      "845:\tlearn: 0.5432621\ttotal: 12.9s\tremaining: 2.35s\n",
      "846:\tlearn: 0.5432400\ttotal: 12.9s\tremaining: 2.33s\n",
      "847:\tlearn: 0.5432178\ttotal: 12.9s\tremaining: 2.32s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "848:\tlearn: 0.5431868\ttotal: 12.9s\tremaining: 2.3s\n",
      "849:\tlearn: 0.5431203\ttotal: 13s\tremaining: 2.29s\n",
      "850:\tlearn: 0.5430427\ttotal: 13s\tremaining: 2.27s\n",
      "851:\tlearn: 0.5430015\ttotal: 13s\tremaining: 2.25s\n",
      "852:\tlearn: 0.5429696\ttotal: 13s\tremaining: 2.24s\n",
      "853:\tlearn: 0.5429242\ttotal: 13s\tremaining: 2.22s\n",
      "854:\tlearn: 0.5428851\ttotal: 13s\tremaining: 2.21s\n",
      "855:\tlearn: 0.5428044\ttotal: 13s\tremaining: 2.19s\n",
      "856:\tlearn: 0.5427781\ttotal: 13.1s\tremaining: 2.18s\n",
      "857:\tlearn: 0.5427467\ttotal: 13.1s\tremaining: 2.16s\n",
      "858:\tlearn: 0.5427094\ttotal: 13.1s\tremaining: 2.15s\n",
      "859:\tlearn: 0.5426507\ttotal: 13.1s\tremaining: 2.13s\n",
      "860:\tlearn: 0.5426062\ttotal: 13.1s\tremaining: 2.12s\n",
      "861:\tlearn: 0.5425551\ttotal: 13.1s\tremaining: 2.1s\n",
      "862:\tlearn: 0.5425392\ttotal: 13.1s\tremaining: 2.08s\n",
      "863:\tlearn: 0.5424287\ttotal: 13.1s\tremaining: 2.07s\n",
      "864:\tlearn: 0.5423778\ttotal: 13.2s\tremaining: 2.05s\n",
      "865:\tlearn: 0.5423305\ttotal: 13.2s\tremaining: 2.04s\n",
      "866:\tlearn: 0.5422879\ttotal: 13.2s\tremaining: 2.02s\n",
      "867:\tlearn: 0.5422434\ttotal: 13.2s\tremaining: 2.01s\n",
      "868:\tlearn: 0.5421981\ttotal: 13.2s\tremaining: 1.99s\n",
      "869:\tlearn: 0.5421230\ttotal: 13.2s\tremaining: 1.98s\n",
      "870:\tlearn: 0.5420868\ttotal: 13.2s\tremaining: 1.96s\n",
      "871:\tlearn: 0.5420637\ttotal: 13.2s\tremaining: 1.94s\n",
      "872:\tlearn: 0.5420446\ttotal: 13.3s\tremaining: 1.93s\n",
      "873:\tlearn: 0.5420067\ttotal: 13.3s\tremaining: 1.91s\n",
      "874:\tlearn: 0.5419641\ttotal: 13.3s\tremaining: 1.9s\n",
      "875:\tlearn: 0.5419087\ttotal: 13.3s\tremaining: 1.88s\n",
      "876:\tlearn: 0.5418191\ttotal: 13.3s\tremaining: 1.87s\n",
      "877:\tlearn: 0.5417765\ttotal: 13.3s\tremaining: 1.85s\n",
      "878:\tlearn: 0.5417014\ttotal: 13.3s\tremaining: 1.84s\n",
      "879:\tlearn: 0.5416683\ttotal: 13.4s\tremaining: 1.82s\n",
      "880:\tlearn: 0.5416397\ttotal: 13.4s\tremaining: 1.81s\n",
      "881:\tlearn: 0.5416090\ttotal: 13.4s\tremaining: 1.79s\n",
      "882:\tlearn: 0.5415542\ttotal: 13.4s\tremaining: 1.77s\n",
      "883:\tlearn: 0.5415352\ttotal: 13.4s\tremaining: 1.76s\n",
      "884:\tlearn: 0.5414757\ttotal: 13.4s\tremaining: 1.74s\n",
      "885:\tlearn: 0.5414406\ttotal: 13.4s\tremaining: 1.73s\n",
      "886:\tlearn: 0.5414049\ttotal: 13.5s\tremaining: 1.71s\n",
      "887:\tlearn: 0.5413803\ttotal: 13.5s\tremaining: 1.7s\n",
      "888:\tlearn: 0.5413485\ttotal: 13.5s\tremaining: 1.68s\n",
      "889:\tlearn: 0.5413289\ttotal: 13.5s\tremaining: 1.67s\n",
      "890:\tlearn: 0.5413072\ttotal: 13.5s\tremaining: 1.65s\n",
      "891:\tlearn: 0.5412742\ttotal: 13.5s\tremaining: 1.64s\n",
      "892:\tlearn: 0.5412382\ttotal: 13.5s\tremaining: 1.62s\n",
      "893:\tlearn: 0.5412195\ttotal: 13.5s\tremaining: 1.6s\n",
      "894:\tlearn: 0.5411837\ttotal: 13.6s\tremaining: 1.59s\n",
      "895:\tlearn: 0.5411376\ttotal: 13.6s\tremaining: 1.57s\n",
      "896:\tlearn: 0.5410932\ttotal: 13.6s\tremaining: 1.56s\n",
      "897:\tlearn: 0.5410584\ttotal: 13.6s\tremaining: 1.54s\n",
      "898:\tlearn: 0.5410204\ttotal: 13.6s\tremaining: 1.53s\n",
      "899:\tlearn: 0.5409644\ttotal: 13.6s\tremaining: 1.51s\n",
      "900:\tlearn: 0.5409425\ttotal: 13.6s\tremaining: 1.5s\n",
      "901:\tlearn: 0.5408957\ttotal: 13.7s\tremaining: 1.48s\n",
      "902:\tlearn: 0.5408755\ttotal: 13.7s\tremaining: 1.47s\n",
      "903:\tlearn: 0.5408353\ttotal: 13.7s\tremaining: 1.45s\n",
      "904:\tlearn: 0.5408125\ttotal: 13.7s\tremaining: 1.44s\n",
      "905:\tlearn: 0.5407847\ttotal: 13.7s\tremaining: 1.42s\n",
      "906:\tlearn: 0.5407603\ttotal: 13.7s\tremaining: 1.41s\n",
      "907:\tlearn: 0.5406969\ttotal: 13.7s\tremaining: 1.39s\n",
      "908:\tlearn: 0.5406532\ttotal: 13.8s\tremaining: 1.38s\n",
      "909:\tlearn: 0.5406213\ttotal: 13.8s\tremaining: 1.36s\n",
      "910:\tlearn: 0.5405857\ttotal: 13.8s\tremaining: 1.35s\n",
      "911:\tlearn: 0.5405603\ttotal: 13.8s\tremaining: 1.33s\n",
      "912:\tlearn: 0.5404823\ttotal: 13.8s\tremaining: 1.31s\n",
      "913:\tlearn: 0.5404444\ttotal: 13.8s\tremaining: 1.3s\n",
      "914:\tlearn: 0.5403449\ttotal: 13.8s\tremaining: 1.28s\n",
      "915:\tlearn: 0.5403274\ttotal: 13.8s\tremaining: 1.27s\n",
      "916:\tlearn: 0.5403002\ttotal: 13.9s\tremaining: 1.25s\n",
      "917:\tlearn: 0.5402724\ttotal: 13.9s\tremaining: 1.24s\n",
      "918:\tlearn: 0.5402497\ttotal: 13.9s\tremaining: 1.22s\n",
      "919:\tlearn: 0.5401967\ttotal: 13.9s\tremaining: 1.21s\n",
      "920:\tlearn: 0.5401338\ttotal: 13.9s\tremaining: 1.19s\n",
      "921:\tlearn: 0.5401039\ttotal: 13.9s\tremaining: 1.18s\n",
      "922:\tlearn: 0.5400723\ttotal: 13.9s\tremaining: 1.16s\n",
      "923:\tlearn: 0.5400389\ttotal: 14s\tremaining: 1.15s\n",
      "924:\tlearn: 0.5399348\ttotal: 14s\tremaining: 1.13s\n",
      "925:\tlearn: 0.5399165\ttotal: 14s\tremaining: 1.12s\n",
      "926:\tlearn: 0.5398613\ttotal: 14s\tremaining: 1.1s\n",
      "927:\tlearn: 0.5398448\ttotal: 14s\tremaining: 1.09s\n",
      "928:\tlearn: 0.5398181\ttotal: 14s\tremaining: 1.07s\n",
      "929:\tlearn: 0.5397750\ttotal: 14s\tremaining: 1.06s\n",
      "930:\tlearn: 0.5397540\ttotal: 14s\tremaining: 1.04s\n",
      "931:\tlearn: 0.5397139\ttotal: 14.1s\tremaining: 1.02s\n",
      "932:\tlearn: 0.5396925\ttotal: 14.1s\tremaining: 1.01s\n",
      "933:\tlearn: 0.5396694\ttotal: 14.1s\tremaining: 995ms\n",
      "934:\tlearn: 0.5396509\ttotal: 14.1s\tremaining: 980ms\n",
      "935:\tlearn: 0.5396165\ttotal: 14.1s\tremaining: 965ms\n",
      "936:\tlearn: 0.5395845\ttotal: 14.1s\tremaining: 950ms\n",
      "937:\tlearn: 0.5395647\ttotal: 14.1s\tremaining: 935ms\n",
      "938:\tlearn: 0.5395460\ttotal: 14.2s\tremaining: 919ms\n",
      "939:\tlearn: 0.5395034\ttotal: 14.2s\tremaining: 904ms\n",
      "940:\tlearn: 0.5394747\ttotal: 14.2s\tremaining: 889ms\n",
      "941:\tlearn: 0.5394344\ttotal: 14.2s\tremaining: 874ms\n",
      "942:\tlearn: 0.5393953\ttotal: 14.2s\tremaining: 859ms\n",
      "943:\tlearn: 0.5393650\ttotal: 14.2s\tremaining: 844ms\n",
      "944:\tlearn: 0.5393232\ttotal: 14.2s\tremaining: 828ms\n",
      "945:\tlearn: 0.5392436\ttotal: 14.2s\tremaining: 813ms\n",
      "946:\tlearn: 0.5392209\ttotal: 14.3s\tremaining: 798ms\n",
      "947:\tlearn: 0.5392004\ttotal: 14.3s\tremaining: 783ms\n",
      "948:\tlearn: 0.5391650\ttotal: 14.3s\tremaining: 768ms\n",
      "949:\tlearn: 0.5391348\ttotal: 14.3s\tremaining: 753ms\n",
      "950:\tlearn: 0.5390752\ttotal: 14.3s\tremaining: 738ms\n",
      "951:\tlearn: 0.5390502\ttotal: 14.3s\tremaining: 722ms\n",
      "952:\tlearn: 0.5390272\ttotal: 14.3s\tremaining: 707ms\n",
      "953:\tlearn: 0.5390036\ttotal: 14.4s\tremaining: 692ms\n",
      "954:\tlearn: 0.5389799\ttotal: 14.4s\tremaining: 677ms\n",
      "955:\tlearn: 0.5389168\ttotal: 14.4s\tremaining: 662ms\n",
      "956:\tlearn: 0.5388864\ttotal: 14.4s\tremaining: 647ms\n",
      "957:\tlearn: 0.5388315\ttotal: 14.4s\tremaining: 632ms\n",
      "958:\tlearn: 0.5388150\ttotal: 14.4s\tremaining: 617ms\n",
      "959:\tlearn: 0.5387426\ttotal: 14.4s\tremaining: 602ms\n",
      "960:\tlearn: 0.5387168\ttotal: 14.5s\tremaining: 587ms\n",
      "961:\tlearn: 0.5386861\ttotal: 14.5s\tremaining: 572ms\n",
      "962:\tlearn: 0.5386671\ttotal: 14.5s\tremaining: 556ms\n",
      "963:\tlearn: 0.5386492\ttotal: 14.5s\tremaining: 541ms\n",
      "964:\tlearn: 0.5386208\ttotal: 14.5s\tremaining: 526ms\n",
      "965:\tlearn: 0.5385722\ttotal: 14.5s\tremaining: 511ms\n",
      "966:\tlearn: 0.5385367\ttotal: 14.5s\tremaining: 496ms\n",
      "967:\tlearn: 0.5385169\ttotal: 14.5s\tremaining: 481ms\n",
      "968:\tlearn: 0.5385006\ttotal: 14.6s\tremaining: 466ms\n",
      "969:\tlearn: 0.5384636\ttotal: 14.6s\tremaining: 451ms\n",
      "970:\tlearn: 0.5384477\ttotal: 14.6s\tremaining: 436ms\n",
      "971:\tlearn: 0.5384323\ttotal: 14.6s\tremaining: 421ms\n",
      "972:\tlearn: 0.5384077\ttotal: 14.6s\tremaining: 406ms\n",
      "973:\tlearn: 0.5383832\ttotal: 14.6s\tremaining: 391ms\n",
      "974:\tlearn: 0.5383622\ttotal: 14.6s\tremaining: 375ms\n",
      "975:\tlearn: 0.5382683\ttotal: 14.7s\tremaining: 360ms\n",
      "976:\tlearn: 0.5382503\ttotal: 14.7s\tremaining: 345ms\n",
      "977:\tlearn: 0.5381885\ttotal: 14.7s\tremaining: 330ms\n",
      "978:\tlearn: 0.5381289\ttotal: 14.7s\tremaining: 315ms\n",
      "979:\tlearn: 0.5381152\ttotal: 14.7s\tremaining: 300ms\n",
      "980:\tlearn: 0.5380852\ttotal: 14.7s\tremaining: 285ms\n",
      "981:\tlearn: 0.5380558\ttotal: 14.7s\tremaining: 270ms\n",
      "982:\tlearn: 0.5380363\ttotal: 14.7s\tremaining: 255ms\n",
      "983:\tlearn: 0.5380077\ttotal: 14.8s\tremaining: 240ms\n",
      "984:\tlearn: 0.5379861\ttotal: 14.8s\tremaining: 225ms\n",
      "985:\tlearn: 0.5379668\ttotal: 14.8s\tremaining: 210ms\n",
      "986:\tlearn: 0.5379235\ttotal: 14.8s\tremaining: 195ms\n",
      "987:\tlearn: 0.5378861\ttotal: 14.8s\tremaining: 180ms\n",
      "988:\tlearn: 0.5378539\ttotal: 14.8s\tremaining: 165ms\n",
      "989:\tlearn: 0.5378014\ttotal: 14.8s\tremaining: 150ms\n",
      "990:\tlearn: 0.5377844\ttotal: 14.9s\tremaining: 135ms\n",
      "991:\tlearn: 0.5377238\ttotal: 14.9s\tremaining: 120ms\n",
      "992:\tlearn: 0.5377078\ttotal: 14.9s\tremaining: 105ms\n",
      "993:\tlearn: 0.5376746\ttotal: 14.9s\tremaining: 89.9ms\n",
      "994:\tlearn: 0.5376357\ttotal: 14.9s\tremaining: 74.9ms\n",
      "995:\tlearn: 0.5376191\ttotal: 14.9s\tremaining: 59.9ms\n",
      "996:\tlearn: 0.5375774\ttotal: 14.9s\tremaining: 44.9ms\n",
      "997:\tlearn: 0.5375488\ttotal: 14.9s\tremaining: 30ms\n",
      "998:\tlearn: 0.5375216\ttotal: 15s\tremaining: 15ms\n",
      "999:\tlearn: 0.5374975\ttotal: 15s\tremaining: 0us\n",
      "Train RMSE - CatBoost: 0.5374975024390708\n"
     ]
    }
   ],
   "source": [
    "from catboost import CatBoostRegressor\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import numpy as np\n",
    "\n",
    "# Assuming 'X_train' is your training set and 'y_train' is the corresponding target\n",
    "X_train = merged_df.drop('log_bike_count', axis=1)  # Features\n",
    "y_train = merged_df['log_bike_count']  # Target\n",
    "\n",
    "# Assuming 'X_test' is your test set\n",
    "X_test = merged_X_test  # Features\n",
    "\n",
    "# Initialize CatBoost model\n",
    "model_catboost = CatBoostRegressor()\n",
    "\n",
    "# Fit the model on the training data\n",
    "model_catboost.fit(X_train, y_train)\n",
    "\n",
    "# Predict on the training set\n",
    "y_pred_train_catboost = model_catboost.predict(X_train)\n",
    "\n",
    "# Calculate RMSE on the training set\n",
    "train_rmse_catboost = np.sqrt(mean_squared_error(y_train, y_pred_train_catboost))\n",
    "print(f\"Train RMSE - CatBoost: {train_rmse_catboost}\")\n",
    "\n",
    "y_pred_test = model_catboost.predict(X_test)\n",
    "\n",
    "pred_df = pd.DataFrame({'Id': X_test.index, 'log_bike_count': y_pred_test})\n",
    "\n",
    "pred_df.to_csv('submission.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c27690d3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc82f03",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "70135a68",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c577fc6",
   "metadata": {},
   "outputs": [],
   "source": [
    "bike_counts_by_site = df.groupby('site_id')['bike_count'].sum()\n",
    "\n",
    "# Plotting\n",
    "plt.figure(figsize=(10, 6))\n",
    "bike_counts_by_site.plot(kind='bar')\n",
    "plt.title('Bike Count by Site ID')\n",
    "plt.xlabel('Site ID')\n",
    "plt.ylabel('Bike Count')\n",
    "plt.xticks(rotation=45)\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af5afcbd",
   "metadata": {},
   "source": [
    "29,904,750 bikes in total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40cc344b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df['bike_count'].sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7722623",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a195c50a",
   "metadata": {},
   "outputs": [],
   "source": [
    "counter_counts = df.groupby('counter_name')['bike_count'].sum().reset_index().sort_values('bike_count', ascending=False)\n",
    "\n",
    "print(counter_counts.head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1d3d901c",
   "metadata": {},
   "outputs": [],
   "source": [
    "sns.boxplot(x=df['bike_count'])\n",
    "\n",
    "plt.title('Box Plot of Bike Count')\n",
    "plt.xlabel('Bike Count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c2a3471b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ext = pd.read_csv('external_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "e1781734",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 3322 entries, 0 to 3321\n",
      "Data columns (total 59 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   numer_sta  3322 non-null   int64  \n",
      " 1   date       3322 non-null   object \n",
      " 2   pmer       3322 non-null   int64  \n",
      " 3   tend       3322 non-null   int64  \n",
      " 4   cod_tend   3322 non-null   int64  \n",
      " 5   dd         3322 non-null   int64  \n",
      " 6   ff         3322 non-null   float64\n",
      " 7   t          3322 non-null   float64\n",
      " 8   td         3322 non-null   float64\n",
      " 9   u          3322 non-null   int64  \n",
      " 10  vv         3322 non-null   int64  \n",
      " 11  ww         3322 non-null   int64  \n",
      " 12  w1         3315 non-null   float64\n",
      " 13  w2         3312 non-null   float64\n",
      " 14  n          3166 non-null   float64\n",
      " 15  nbas       3317 non-null   float64\n",
      " 16  hbas       2869 non-null   float64\n",
      " 17  cl         2909 non-null   float64\n",
      " 18  cm         1941 non-null   float64\n",
      " 19  ch         1678 non-null   float64\n",
      " 20  pres       3322 non-null   int64  \n",
      " 21  niv_bar    0 non-null      float64\n",
      " 22  geop       0 non-null      float64\n",
      " 23  tend24     3312 non-null   float64\n",
      " 24  tn12       830 non-null    float64\n",
      " 25  tn24       0 non-null      float64\n",
      " 26  tx12       830 non-null    float64\n",
      " 27  tx24       0 non-null      float64\n",
      " 28  tminsol    1 non-null      float64\n",
      " 29  sw         0 non-null      float64\n",
      " 30  tw         0 non-null      float64\n",
      " 31  raf10      3312 non-null   float64\n",
      " 32  rafper     3322 non-null   float64\n",
      " 33  per        3322 non-null   int64  \n",
      " 34  etat_sol   3270 non-null   float64\n",
      " 35  ht_neige   3273 non-null   float64\n",
      " 36  ssfrai     2877 non-null   float64\n",
      " 37  perssfrai  2877 non-null   float64\n",
      " 38  rr1        3313 non-null   float64\n",
      " 39  rr3        3316 non-null   float64\n",
      " 40  rr6        3306 non-null   float64\n",
      " 41  rr12       3300 non-null   float64\n",
      " 42  rr24       3298 non-null   float64\n",
      " 43  phenspe1   0 non-null      float64\n",
      " 44  phenspe2   0 non-null      float64\n",
      " 45  phenspe3   0 non-null      float64\n",
      " 46  phenspe4   0 non-null      float64\n",
      " 47  nnuage1    2873 non-null   float64\n",
      " 48  ctype1     2524 non-null   float64\n",
      " 49  hnuage1    2867 non-null   float64\n",
      " 50  nnuage2    1695 non-null   float64\n",
      " 51  ctype2     1443 non-null   float64\n",
      " 52  hnuage2    1695 non-null   float64\n",
      " 53  nnuage3    618 non-null    float64\n",
      " 54  ctype3     470 non-null    float64\n",
      " 55  hnuage3    618 non-null    float64\n",
      " 56  nnuage4    42 non-null     float64\n",
      " 57  ctype4     87 non-null     float64\n",
      " 58  hnuage4    42 non-null     float64\n",
      "dtypes: float64(48), int64(10), object(1)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "ext.info()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
